{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Python and Numpy.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "id": "Mq7n8uFiH4n6",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# **Python**"
      ]
    },
    {
      "metadata": {
        "id": "V9UGOqV8I-fh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Python is a high-level, dynamically typed multiparadigm programming language. It is quite simple to use since it looks like psuedo code. For instance, the quick sort algorithm is coded as below :"
      ]
    },
    {
      "metadata": {
        "id": "qJ3uuyN3JU36",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0da74d4d-f3bc-4031-bc47-1440c6e82ea6"
      },
      "cell_type": "code",
      "source": [
        "def quicksort(mlblr_in) :\n",
        "  if (len(mlblr_in) <= 1) :\n",
        "    return mlblr_in;\n",
        "  mlblr_piv = mlblr_in[len(mlblr_in) // 2];\n",
        "  mlblr_left = [x for x in mlblr_in if x < mlblr_piv];\n",
        "  mlblr_mid = [x for x in mlblr_in if x == mlblr_piv];\n",
        "  mlblr_right = [x for x in mlblr_in if x > mlblr_piv];\n",
        "  \n",
        "  return quicksort(mlblr_left) + mlblr_mid + quicksort(mlblr_right);\n",
        "\n",
        "print(quicksort([22, 87, -13, 0, 1134, 29, 19]));"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-13, 0, 19, 22, 29, 87, 1134]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ALMPNhC6LcBu",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Python versions\n",
        "There are 2 versions of Python in development in parallel at the moment : 2.7 and 3.5. These versions are incompatibe with each other. In this tutorial, we use version 3.5. Users can check their version with _python --version_ command."
      ]
    },
    {
      "metadata": {
        "id": "IMyUhKeAMFZB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Basic data types\n",
        "Python supports following data types : integers, floats, booleans, and strings.\n",
        "\n",
        "* Numbers\n"
      ]
    },
    {
      "metadata": {
        "id": "swPHiInJMgdv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "outputId": "c7045947-a23a-48c1-eeff-7acc08e82420"
      },
      "cell_type": "code",
      "source": [
        "mlblr = 3\n",
        "print(type(mlblr)) \n",
        "print(mlblr)      \n",
        "print(mlblr + 1)   \n",
        "print(mlblr - 1)  \n",
        "print(mlblr * 2)  \n",
        "print(mlblr ** 2)\n",
        "mlblr += 1\n",
        "print(mlblr) \n",
        "mlblr *= 2\n",
        "print(mlblr) \n",
        "mlblr2 = 2.5\n",
        "print(type(mlblr2)) \n",
        "print(mlblr2, mlblr2 + 1, mlblr2 * 2, mlblr2 ** 2)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'int'>\n",
            "3\n",
            "4\n",
            "2\n",
            "6\n",
            "9\n",
            "4\n",
            "8\n",
            "<class 'float'>\n",
            "2.5 3.5 5.0 6.25\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "yB6Fhta2Nxqx",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "_Note that, Python does not support unary increment(++) or unary decrement(--)._ Python also has built-in types for complex numbers; you can find all of the details in the [documentation.](https://docs.python.org/3.5/library/stdtypes.html#numeric-types-int-float-complex)"
      ]
    },
    {
      "metadata": {
        "id": "pNcyAAFgPOnQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Booleans : Python has behavior similar to quite a lot of other languages. However, it uses english words, like for example, _AND instead of & operator_."
      ]
    },
    {
      "metadata": {
        "id": "jFqAFd3MPwpX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "67f4ed06-ff8d-402e-f0f5-0ace6502950a"
      },
      "cell_type": "code",
      "source": [
        "mlblrt = True\n",
        "mlblrf = False\n",
        "print(type(mlblrt)) # Prints \"<class 'bool'>\"\n",
        "print(mlblrt and mlblrf) # Logical AND; prints \"False\"\n",
        "print(mlblrt or mlblrf)  # Logical OR; prints \"True\"\n",
        "print(not mlblrt)   # Logical NOT; prints \"False\"\n",
        "print(mlblrt != mlblrf)  # Logical XOR; prints \"True\""
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'bool'>\n",
            "False\n",
            "True\n",
            "False\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ja5jeNrsQUbw",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Strings : Python has a plethora of handy utility functions that help manage strings in any way possible. "
      ]
    },
    {
      "metadata": {
        "id": "2M7qPfoXQxFg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "ebfde812-aab4-4ffd-cb2b-ed483bb40bd4"
      },
      "cell_type": "code",
      "source": [
        "machine = 'machine'    # String literals can use single quotes\n",
        "learning = \"learning\"    # or double quotes; it does not matter.\n",
        "print(machine)       # Prints \"machine\"\n",
        "print(len(machine))  # String length; prints \"7\"\n",
        "ml = machine + ' ' + learning  # String concatenation\n",
        "print(ml)  # prints \"hello world\"\n",
        "ml2 = '%s %s %d' % (machine, learning, 12)  # sprintf style string formatting\n",
        "print(hw12)  # prints \"hello world 12\""
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "machine\n",
            "7\n",
            "machine learning\n",
            "hello world 12\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "sAnmi5V6Q7fy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Some common utility fucntions are shown below :"
      ]
    },
    {
      "metadata": {
        "id": "ypQ9X2CqRAld",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "ce67620e-c490-44fc-dfc2-40131b819da8"
      },
      "cell_type": "code",
      "source": [
        "mlblr = \"mlblr\"\n",
        "print(mlblr.capitalize())  # Capitalize a string; prints \"Hello\"\n",
        "print(mlblr.upper())       # Convert a string to uppercase; prints \"HELLO\"\n",
        "print(mlblr.rjust(7))      # Right-justify a string, padding with spaces; prints \"  hello\"\n",
        "print(mlblr.center(7))     # Center a string, padding with spaces; prints \" hello \"\n",
        "print(mlblr.replace('l', '(ell)'))  # Replace all instances of one substring with another;\n",
        "                                # prints \"he(ell)(ell)o\"\n",
        "print('  mlblr2 '.strip())  # Strip leading and trailing whitespace; prints \"world\""
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mlblr\n",
            "MLBLR\n",
            "  mlblr\n",
            " mlblr \n",
            "m(ell)b(ell)r\n",
            "mlblr2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "KhiaMDUhRKXJ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can find a list of all string methods in the [documentation.](https://docs.python.org/3.5/tutorial/datastructures.html#more-on-lists)"
      ]
    },
    {
      "metadata": {
        "id": "hWsk6Tm8TA_x",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Collections\n",
        "Python supports following data types : lists, dictionaries, sets, and tuples."
      ]
    },
    {
      "metadata": {
        "id": "fDuMs0xiTQgQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Lists : A list is the Python equivalent of an array, but is resizeable and can contain elements of different types."
      ]
    },
    {
      "metadata": {
        "id": "rTrQxe-oTpxM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "c25dd2d0-9cdd-45d7-fbb5-dc766e043955"
      },
      "cell_type": "code",
      "source": [
        "eip_list = [3, 1, 2]    # Create a list\n",
        "print(eip_list, eip_list[2])  # Prints \"[3, 1, 2] 2\"\n",
        "print(eip_list[-1])     # Negative indices count from the end of the list; prints \"2\"\n",
        "eip_list[2] = 'ml'     # Lists can contain elements of different types\n",
        "print(eip_list)         # Prints \"[3, 1, 'foo']\"\n",
        "eip_list.append('blr')  # Add a new element to the end of the list\n",
        "print(eip_list)         # Prints \"[3, 1, 'foo', 'bar']\"\n",
        "eip = eip_list.pop()      # Remove and return the last element of the list\n",
        "print(eip, eip_list)      # Prints \"bar [3, 1, 'foo']\""
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[3, 1, 2] 2\n",
            "2\n",
            "[3, 1, 'ml']\n",
            "[3, 1, 'ml', 'blr']\n",
            "blr [3, 1, 'ml']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ntxGlna4ULib",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can find more details about lists in the [documentation.](https://docs.python.org/3.5/tutorial/datastructures.html#more-on-lists)"
      ]
    },
    {
      "metadata": {
        "id": "XE1DvQ_P0rxl",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Slicing: In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:"
      ]
    },
    {
      "metadata": {
        "id": "LYRtc-xB0u2J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "outputId": "de818138-682d-47a3-b16c-36fdaf081b89"
      },
      "cell_type": "code",
      "source": [
        "eip_list = list(range(5))    \n",
        "print(eip_list)               # Prints \"[0, 1, 2, 3, 4]\"\n",
        "print(eip_list[2:4])          # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\n",
        "print(eip_list[2:])           # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\n",
        "print(eip_list[:2])           # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\n",
        "print(eip_list[:])            # Get a slice of the whole list; prints \"[0, 1, 2, 3, 4]\"\n",
        "print(eip_list[:-1])          # Slice indices can be negative; prints \"[0, 1, 2, 3]\"\n",
        "eip_list[2:4] = [8, 9]        # Assign a new sublist to a slice\n",
        "print(eip_list)               # Prints \"[0, 1, 8, 9, 4]\""
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 1, 2, 3, 4]\n",
            "[2, 3]\n",
            "[2, 3, 4]\n",
            "[0, 1]\n",
            "[0, 1, 2, 3, 4]\n",
            "[0, 1, 2, 3]\n",
            "[0, 1, 8, 9, 4]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "jX_kxkNf1PCv",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We can loop over the elements of a list."
      ]
    },
    {
      "metadata": {
        "id": "yhVnyvTO1cva",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "b15a48e1-c196-46ec-c9c8-8ff039404c8f"
      },
      "cell_type": "code",
      "source": [
        "mlblr_animals = ['cat', 'dog', 'monkey']\n",
        "for mlblr_animal in mlblr_animals:\n",
        "    print(mlblr_animal)\n",
        "# Prints \"cat\", \"dog\", \"monkey\", each on its own line."
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "cat\n",
            "dog\n",
            "monkey\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "S5KJ3aBh1gm5",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "However, If we need the index of each element within the body of a loop, we can use the built-in enumerate function.\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "iBE0vn5L1n0W",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "d042965b-07c2-4c83-f6a9-c1b9ea4235a6"
      },
      "cell_type": "code",
      "source": [
        "mlblr_animals = ['cat', 'dog', 'monkey']\n",
        "for idx, mlblr_animal in enumerate(mlblr_animals):\n",
        "    print('#%d: %s' % (idx + 1, mlblr_animal))\n",
        "# Prints \"#1: cat\", \"#2: dog\", \"#3: monkey\", each on its own line"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "#1: cat\n",
            "#2: dog\n",
            "#3: monkey\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "0uZ80zPU14th",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "List comprehensions help to modify elements of a list inline."
      ]
    },
    {
      "metadata": {
        "id": "rXoQ4A4X2Ely",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "dc9d4518-6374-46c3-e4ea-0dc82c788bb1"
      },
      "cell_type": "code",
      "source": [
        "eip_list = [0, 1, 2, 3, 4]\n",
        "eip_list_squares = [x ** 2 for x in eip_list]\n",
        "print(eip_list_squares)   # Prints [0, 1, 4, 9, 16]"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 1, 4, 9, 16]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_9BF_iIG2G9A",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Comprehensions may also have user defined conditions."
      ]
    },
    {
      "metadata": {
        "id": "Xp1R5c-s2Kxq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "014c29de-2e3d-43c1-9b3f-e7321f476e4b"
      },
      "cell_type": "code",
      "source": [
        "eip_list = [0, 1, 2, 3, 4]\n",
        "eip_list_even_squares = [x ** 2 for x in nums if x % 2 == 0]\n",
        "print(eip_list_even_squares)  # Prints \"[0, 4, 16]\""
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 4, 16]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "PDwEgCiV2YQ-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Dictionaries : A dictionary stores (key, value) pairs, similar to a Map in Java or an object in Javascript. "
      ]
    },
    {
      "metadata": {
        "id": "AonNscll2gfp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "34ba92c8-8c9f-4ec3-d79a-c98b09851d98"
      },
      "cell_type": "code",
      "source": [
        "eip_dict = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\n",
        "print(eip_dict['cat'])       # Get an entry from a dictionary; prints \"cute\"\n",
        "print('cat' in eip_dict)     # Check if a dictionary has a given key; prints \"True\"\n",
        "eip_dict['fish'] = 'wet'     # Set an entry in a dictionary\n",
        "print(eip_dict['fish'])      # Prints \"wet\"\n",
        "# print(d['monkey'])  # KeyError: 'monkey' not a key of d\n",
        "print(eip_dict.get('monkey', 'N/A'))  # Get an element with a default; prints \"N/A\"\n",
        "print(eip_dict.get('fish', 'N/A'))    # Get an element with a default; prints \"wet\"\n",
        "del eip_dict['fish']         # Remove an element from a dictionary\n",
        "print(eip_dict.get('fish', 'N/A')) # \"fish\" is no longer a key; prints \"N/A\""
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "cute\n",
            "True\n",
            "wet\n",
            "N/A\n",
            "wet\n",
            "N/A\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "n47HhyMc4rNW",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can find more info in the [documentation.](https://docs.python.org/3.5/library/stdtypes.html#dict)"
      ]
    },
    {
      "metadata": {
        "id": "l_p1Uv-75KTg",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Looping for dictionaries is straight forward."
      ]
    },
    {
      "metadata": {
        "id": "9Vd4K6rH5vvc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "214dfa52-d77d-4b7d-86d1-1f9f09032947"
      },
      "cell_type": "code",
      "source": [
        "eip_dict = {'person': 2, 'cat': 4, 'spider': 8}\n",
        "for eip_animal in eip_dict:\n",
        "    legs = eip_dict[eip_animal]\n",
        "    print('A %s has %d legs' % (eip_animal, legs))\n",
        "# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\""
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "A person has 2 legs\n",
            "A cat has 4 legs\n",
            "A spider has 8 legs\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "LNSx1Tk96Jsr",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "If we need keys and their corresponding values in the loop, we use the items method."
      ]
    },
    {
      "metadata": {
        "id": "yaQmt4aF6bDQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "2b4d3fc5-577c-4c91-dd50-b54a0796f7e0"
      },
      "cell_type": "code",
      "source": [
        "eip_dict = {'person': 2, 'cat': 4, 'spider': 8}\n",
        "for eip_animal, eip_legs in eip_dict.items():\n",
        "    print('A %s has %d legs' % (eip_animal, eip_legs))\n",
        "# Prints \"A person has 2 legs\", \"A cat has 4 legs\", \"A spider has 8 legs\""
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "A person has 2 legs\n",
            "A cat has 4 legs\n",
            "A spider has 8 legs\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "SALD7bB86_p-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Dictionary comprehensions are similar to list comprehensions."
      ]
    },
    {
      "metadata": {
        "id": "Hf3DkcR87E-9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "23e87523-7881-48a9-8b38-374d14eb7c32"
      },
      "cell_type": "code",
      "source": [
        "eip_list = [0, 1, 2, 3, 4]\n",
        "eip_dict_even_squares = {x: x ** 2 for x in nums if x % 2 == 0}\n",
        "print(eip_dict_even_squares)  "
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{0: 0, 2: 4, 4: 16}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "43fOLL0D8Xuu",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Sets"
      ]
    },
    {
      "metadata": {
        "id": "MGGiJVma9syT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "940129b9-79ff-49c0-93ac-28cb199ac86e"
      },
      "cell_type": "code",
      "source": [
        "eip_set = {'cat', 'dog'}\n",
        "print('cat' in eip_set)   # Check if an element is in a set; prints \"True\"\n",
        "print('fish' in eip_set)  # prints \"False\"\n",
        "eip_set.add('fish')       # Add an element to a set\n",
        "print('fish' in eip_set)  # Prints \"True\"\n",
        "print(len(eip_set))       # Number of elements in a set; prints \"3\"\n",
        "eip_set.add('cat')        # Adding an element that is already in the set does nothing\n",
        "print(len(eip_set))       # Prints \"3\"\n",
        "eip_set.remove('cat')     # Remove an element from a set\n",
        "print(len(eip_set))       # Prints \"2\""
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "3\n",
            "3\n",
            "2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_OTWFM2g-iRy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Looping over a set has the same syntax as iterating over a list. However since sets are unordered, the order cannot be guaranteed."
      ]
    },
    {
      "metadata": {
        "id": "CE6qGlDr-w8c",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "be8c4e28-aca0-4624-b2f0-27b2a9a97987"
      },
      "cell_type": "code",
      "source": [
        "eip_set = {'cat', 'dog', 'fish'}\n",
        "for idx, animal in enumerate(eip_set):\n",
        "    print('#%d: %s' % (idx + 1, animal))\n",
        "# Prints \"#1: fish\", \"#2: dog\", \"#3: cat\""
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "#1: fish\n",
            "#2: cat\n",
            "#3: dog\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "kUeLbM5N_EgI",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Set comprehensions are no different than list comprehensions."
      ]
    },
    {
      "metadata": {
        "id": "pt3XHyZn_NBr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b3c12206-8518-4734-ee55-37ced7283514"
      },
      "cell_type": "code",
      "source": [
        "from math import sqrt\n",
        "eip_set = {int(sqrt(x)) for x in range(30)}\n",
        "print(eip_set)  # Prints \"{0, 1, 2, 3, 4, 5}\""
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{0, 1, 2, 3, 4, 5}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "4jjQvV3PAv7c",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Tuple : A tuple is an (immutable) ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. "
      ]
    },
    {
      "metadata": {
        "id": "NSvNAQlEBFWr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "71b6ce10-a0b0-4d01-81f2-13a4060acb5c"
      },
      "cell_type": "code",
      "source": [
        "eip_dict_with_tuple_keys = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\n",
        "eip_tuple = (5, 6)        # Create a tuple\n",
        "print(type(eip_tuple))    # Prints \"<class 'tuple'>\"\n",
        "print(eip_dict_with_tuple_keys[eip_tuple])       # Prints \"5\"\n",
        "print(eip_dict_with_tuple_keys[(1, 2)])  # Prints \"1\""
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'tuple'>\n",
            "5\n",
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "S4TSg_TMBh3s",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can more information about tuples <a href = https://docs.python.org/3.5/tutorial/datastructures.html#tuples-and-sequences>here.</a>"
      ]
    },
    {
      "metadata": {
        "id": "MEymP3ZqCJdT",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Functions : \n",
        "They are defined using the 'def' word."
      ]
    },
    {
      "metadata": {
        "id": "WdJNdJnwCZDK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "5f17a2d9-22b7-4ca4-90ec-1bd9a917f4de"
      },
      "cell_type": "code",
      "source": [
        "def sign(eip):\n",
        "    if eip > 0:\n",
        "        return 'positive'\n",
        "    elif eip < 0:\n",
        "        return 'negative'\n",
        "    else:\n",
        "        return 'zero'\n",
        "\n",
        "for x in [-1, 0, 1]:\n",
        "    print(sign(x))\n",
        "# Prints \"negative\", \"zero\", \"positive\""
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "negative\n",
            "zero\n",
            "positive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "InZcG5KWCq2K",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Functions can have optional input parameters."
      ]
    },
    {
      "metadata": {
        "id": "6IgLxExaDCrE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "42870b30-4025-40d1-9ca9-910e6fafb256"
      },
      "cell_type": "code",
      "source": [
        "def hello(eip_name, eip_is_loud = False):\n",
        "    if eip_is_loud:\n",
        "        print('HELLO, %s!' % eip_name.upper())\n",
        "    else:\n",
        "        print('Hello, %s' % eip_name)\n",
        "\n",
        "hello('Bob') # Prints \"Hello, Bob\"\n",
        "hello('Fred', eip_is_loud = True)  # Prints \"HELLO, FRED!\""
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello, Bob\n",
            "HELLO, FRED!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "5kT2xW1EDehK",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Classes : The key word is  'class'."
      ]
    },
    {
      "metadata": {
        "id": "Enfl1zu0DsCv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "5bb19c5d-5574-424b-9110-1895935ce37a"
      },
      "cell_type": "code",
      "source": [
        "class Greeter(object):\n",
        "\n",
        "    # Constructor\n",
        "    def __init__(self, eip_name):\n",
        "        self.eip_name = eip_name  # Create an instance variable\n",
        "\n",
        "    # Instance method\n",
        "    def greet(self, eip_is_loud = False):\n",
        "        if eip_is_loud:\n",
        "            print('HELLO, %s!' % self.eip_name.upper())\n",
        "        else:\n",
        "            print('Hello, %s' % self.eip_name)\n",
        "\n",
        "g = Greeter('Fred')  # Construct an instance of the Greeter class\n",
        "g.greet()            # Call an instance method; prints \"Hello, Fred\"\n",
        "g.greet(eip_is_loud = True)   # Call an instance method; prints \"HELLO, FRED!\""
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello, Fred\n",
            "HELLO, FRED!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_KzcP_7TFtR_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can read more about it in the documentation <a href = https://docs.python.org/3.5/tutorial/classes.html> here. </a>"
      ]
    },
    {
      "metadata": {
        "id": "3TU7d407F3vQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# Numpy\n",
        "Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays."
      ]
    },
    {
      "metadata": {
        "id": "9KLopU6zGNwm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "9858f519-cd8c-43dc-e7a4-9aa5f1da54ca"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_arr = np.array([1, 2, 3])   # Create a rank 1 array\n",
        "print(type(eip_arr))            # Prints \"<class 'numpy.ndarray'>\"\n",
        "print(eip_arr.shape)            # Prints \"(3,)\"\n",
        "print(eip_arr[0], eip_arr[1], eip_arr[2])   # Prints \"1 2 3\"\n",
        "eip_arr[0] = 5                  # Change an element of the array\n",
        "print(eip_arr)                  # Prints \"[5, 2, 3]\"\n",
        "\n",
        "eip_arr2 = np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array\n",
        "print(eip_arr2.shape)                     # Prints \"(2, 3)\"\n",
        "print(eip_arr2[0, 0], eip_arr2[0, 1], eip_arr2[1, 0])   # Prints \"1 2 4\""
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'numpy.ndarray'>\n",
            "(3,)\n",
            "1 2 3\n",
            "[5 2 3]\n",
            "(2, 3)\n",
            "1 2 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "-rybBoD-Gthk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpy provides utility functions to create common arrays."
      ]
    },
    {
      "metadata": {
        "id": "GIasjsuOG1m7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "8e2f0374-7dfb-4d95-91ec-44522e0f2e72"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_a = np.zeros((2,2))   # Create an array of all zeros\n",
        "print(eip_a)              # Prints \"[[ 0.  0.]\n",
        "                      #          [ 0.  0.]]\"\n",
        "\n",
        "eip_b = np.ones((1,2))    # Create an array of all ones\n",
        "print(eip_b)              # Prints \"[[ 1.  1.]]\"\n",
        "\n",
        "eip_c = np.full((2,2), 7)  # Create a constant array\n",
        "print(eip_c)               # Prints \"[[ 7.  7.]\n",
        "                       #          [ 7.  7.]]\"\n",
        "\n",
        "eip_d = np.eye(2)         # Create a 2x2 identity matrix\n",
        "print(eip_d)              # Prints \"[[ 1.  0.]\n",
        "                      #          [ 0.  1.]]\"\n",
        "\n",
        "eip_e = np.random.random((2,2))  # Create an array filled with random values\n",
        "print(eip_e)                     # Might print \"[[ 0.91940167  0.08143941]\n",
        "                             #               [ 0.68744134  0.87236687]]\""
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0. 0.]\n",
            " [0. 0.]]\n",
            "[[1. 1.]]\n",
            "[[7 7]\n",
            " [7 7]]\n",
            "[[1. 0.]\n",
            " [0. 1.]]\n",
            "[[0.90737469 0.53124288]\n",
            " [0.87595242 0.46360998]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HoPYIDNSHNC6",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Array Indexing :\n",
        "Numpy offers several ways to index into arrays. Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:"
      ]
    },
    {
      "metadata": {
        "id": "4-tumI6NHh7X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "f1090f39-2477-42a0-da36-c75c05a14852"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create the following rank 2 array with shape (3, 4)\n",
        "# [[ 1  2  3  4]\n",
        "#  [ 5  6  7  8]\n",
        "#  [ 9 10 11 12]]\n",
        "eip_a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n",
        "\n",
        "# Use slicing to pull out the subarray consisting of the first 2 rows\n",
        "# and columns 1 and 2; b is the following array of shape (2, 2):\n",
        "# [[2 3]\n",
        "#  [6 7]]\n",
        "eip_b = eip_a[:2, 1:3]\n",
        "\n",
        "# A slice of an array is a view into the same data, so modifying it\n",
        "# will modify the original array.\n",
        "print(eip_a[0, 1])   # Prints \"2\"\n",
        "eip_b[0, 0] = 77     # b[0, 0] is the same piece of data as a[0, 1]\n",
        "print(eip_a[0, 1])   # Prints \"77\""
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "77\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "qiSgnqURJU_q",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "You can also mix integer indexing with slice indexing. However, doing so will yield an array of lower rank than the original array. "
      ]
    },
    {
      "metadata": {
        "id": "OG7t7yH1JYYF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "a0df7046-a8f2-43cb-82b1-e63605866909"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create the following rank 2 array with shape (3, 4)\n",
        "# [[ 1  2  3  4]\n",
        "#  [ 5  6  7  8]\n",
        "#  [ 9 10 11 12]]\n",
        "eip_a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n",
        "\n",
        "# Two ways of accessing the data in the middle row of the array.\n",
        "# Mixing integer indexing with slices yields an array of lower rank,\n",
        "# while using only slices yields an array of the same rank as the\n",
        "# original array:\n",
        "eip_r1 = eip_a[1, :]    # Rank 1 view of the second row of a\n",
        "eip_r2 = eip_a[1:2, :]  # Rank 2 view of the second row of a\n",
        "print(eip_r1, eip_r1.shape)  # Prints \"[5 6 7 8] (4,)\"\n",
        "print(eip_r2, eip_r2.shape)  # Prints \"[[5 6 7 8]] (1, 4)\"\n",
        "\n",
        "# We can make the same distinction when accessing columns of an array:\n",
        "eip_c1 = eip_a[:, 1]\n",
        "eip_c2 = eip_a[:, 1:2]\n",
        "print(eip_c1, eip_c1.shape)  # Prints \"[ 2  6 10] (3,)\"\n",
        "print(eip_c2, eip_c2.shape)  # Prints \"[[ 2]\n",
        "                             #          [ 6]\n",
        "                             #          [10]] (3, 1)\""
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[5 6 7 8] (4,)\n",
            "[[5 6 7 8]] (1, 4)\n",
            "[ 2  6 10] (3,)\n",
            "[[ 2]\n",
            " [ 6]\n",
            " [10]] (3, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "kbbkCokbLffP",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "When you index into numpy arrays using slicing, the resulting array view will always be a subarray of the original array. In contrast, integer array indexing allows you to construct arbitrary arrays using the data from another array."
      ]
    },
    {
      "metadata": {
        "id": "-fBuRh1yLmTf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "909e5406-34cb-417f-b469-148338c53102"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_a = np.array([[1,2], [3, 4], [5, 6]])\n",
        "\n",
        "# An example of integer array indexing.\n",
        "# The returned array will have shape (3,) and\n",
        "print(eip_a[[0, 1, 2], [0, 1, 0]])  # Prints \"[1 4 5]\"\n",
        "\n",
        "# The above example of integer array indexing is equivalent to this:\n",
        "print(np.array([eip_a[0, 0], eip_a[1, 1], eip_a[2, 0]]))  # Prints \"[1 4 5]\"\n",
        "\n",
        "# When using integer array indexing, you can reuse the same\n",
        "# element from the source array:\n",
        "print(eip_a[[0, 0], [1, 1]])  # Prints \"[2 2]\"\n",
        "\n",
        "# Equivalent to the previous integer array indexing example\n",
        "print(np.array([eip_a[0, 1], eip_a[0, 1]]))  # Prints \"[2 2]\""
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 4 5]\n",
            "[1 4 5]\n",
            "[2 2]\n",
            "[2 2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6Kv2Hq_PTJCR",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "One useful trick with integer array indexing is selecting or mutating one element from each row of a matrix.\n"
      ]
    },
    {
      "metadata": {
        "id": "NFUbLFO3TfVv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "f226570c-8e11-4fa4-cab4-db95d453da9f"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a new array from which we will select elements\n",
        "eip_a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\n",
        "\n",
        "print(eip_a)  # prints \"array([[ 1,  2,  3],\n",
        "          #                [ 4,  5,  6],\n",
        "          #                [ 7,  8,  9],\n",
        "          #                [10, 11, 12]])\"\n",
        "\n",
        "# Create an array of indices\n",
        "eip_b = np.array([0, 2, 0, 1])\n",
        "\n",
        "# Select one element from each row of a using the indices in b\n",
        "print(eip_a[np.arange(4), eip_b])  # Prints \"[ 1  6  7 11]\"\n",
        "\n",
        "# Mutate one element from each row of a using the indices in b\n",
        "eip_a[np.arange(4), eip_b] += 10\n",
        "\n",
        "print(eip_a)  # prints \"array([[11,  2,  3],\n",
        "          #                [ 4,  5, 16],\n",
        "          #                [17,  8,  9],\n",
        "          #                [10, 21, 12]])"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1  2  3]\n",
            " [ 4  5  6]\n",
            " [ 7  8  9]\n",
            " [10 11 12]]\n",
            "[ 1  6  7 11]\n",
            "[[11  2  3]\n",
            " [ 4  5 16]\n",
            " [17  8  9]\n",
            " [10 21 12]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "5xMiDJjCUG-z",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Boolean array indexing lets you pick out arbitrary elements of an array. Frequently this type of indexing is used to select the elements of an array that satisfy some condition."
      ]
    },
    {
      "metadata": {
        "id": "Q9p8x_zWUK1u",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "7e2ca6a0-d123-4e62-d90a-12fb522ab7ba"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_a = np.array([[1,2], [3, 4], [5, 6]])\n",
        "\n",
        "eip_bool_idx = (eip_a > 2)   # Find the elements of a that are bigger than 2;\n",
        "                     # this returns a numpy array of Booleans of the same\n",
        "                     # shape as a, where each slot of bool_idx tells\n",
        "                     # whether that element of a is > 2.\n",
        "\n",
        "print(eip_bool_idx)      # Prints \"[[False False]\n",
        "                     #          [ True  True]\n",
        "                     #          [ True  True]]\"\n",
        "\n",
        "# We use boolean array indexing to construct a rank 1 array\n",
        "# consisting of the elements of a corresponding to the True values\n",
        "# of bool_idx\n",
        "print(eip_a[eip_bool_idx])  # Prints \"[3 4 5 6]\"\n",
        "\n",
        "# We can do all of the above in a single concise statement:\n",
        "print(eip_a[eip_a > 2])     # Prints \"[3 4 5 6]\""
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[False False]\n",
            " [ True  True]\n",
            " [ True  True]]\n",
            "[3 4 5 6]\n",
            "[3 4 5 6]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Wg4TuzuHU8NK",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Datatypes : Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. "
      ]
    },
    {
      "metadata": {
        "id": "dLLBOW5cU_i-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "0b41d248-2506-4196-e953-d84097cac0d7"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_x = np.array([1, 2])   # Let numpy choose the datatype\n",
        "print(eip_x.dtype)         # Prints \"int64\"\n",
        "\n",
        "eip_x = np.array([1.0, 2.0])   # Let numpy choose the datatype\n",
        "print(eip_x.dtype)             # Prints \"float64\"\n",
        "\n",
        "eip_x = np.array([1, 2], dtype=np.int64)   # Force a particular datatype\n",
        "print(eip_x.dtype)                         # Prints \"int64\""
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "int64\n",
            "float64\n",
            "int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "oKQT8wlwVWZv",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Basic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module."
      ]
    },
    {
      "metadata": {
        "id": "7PipPdwwVZ6E",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "outputId": "10d25648-16be-4141-99b5-649ee2e7d7c5"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_x = np.array([[1,2],[3,4]], dtype=np.float64)\n",
        "eip_y = np.array([[5,6],[7,8]], dtype=np.float64)\n",
        "\n",
        "# Elementwise sum; both produce the array\n",
        "# [[ 6.0  8.0]\n",
        "#  [10.0 12.0]]\n",
        "print(eip_x + eip_y)\n",
        "print(np.add(eip_x, eip_y))\n",
        "\n",
        "# Elementwise difference; both produce the array\n",
        "# [[-4.0 -4.0]\n",
        "#  [-4.0 -4.0]]\n",
        "print(eip_x - eip_y)\n",
        "print(np.subtract(eip_x, eip_y))\n",
        "\n",
        "# Elementwise product; both produce the array\n",
        "# [[ 5.0 12.0]\n",
        "#  [21.0 32.0]]\n",
        "print(eip_x * eip_y)\n",
        "print(np.multiply(eip_x, eip_y))\n",
        "\n",
        "# Elementwise division; both produce the array\n",
        "# [[ 0.2         0.33333333]\n",
        "#  [ 0.42857143  0.5       ]]\n",
        "print(eip_x / eip_y)\n",
        "print(np.divide(eip_x, eip_y))\n",
        "\n",
        "# Elementwise square root; produces the array\n",
        "# [[ 1.          1.41421356]\n",
        "#  [ 1.73205081  2.        ]]\n",
        "print(np.sqrt(eip_x))"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 6.  8.]\n",
            " [10. 12.]]\n",
            "[[ 6.  8.]\n",
            " [10. 12.]]\n",
            "[[-4. -4.]\n",
            " [-4. -4.]]\n",
            "[[-4. -4.]\n",
            " [-4. -4.]]\n",
            "[[ 5. 12.]\n",
            " [21. 32.]]\n",
            "[[ 5. 12.]\n",
            " [21. 32.]]\n",
            "[[0.2        0.33333333]\n",
            " [0.42857143 0.5       ]]\n",
            "[[0.2        0.33333333]\n",
            " [0.42857143 0.5       ]]\n",
            "[[1.         1.41421356]\n",
            " [1.73205081 2.        ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "XnKHyEoJWN02",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both as a function in the numpy module and as an instance method of array objects"
      ]
    },
    {
      "metadata": {
        "id": "VF8opDwRWPZe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        },
        "outputId": "d17e5b57-7fd5-4940-c450-3af1559168ee"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "eip_x = np.array([[1,2],[3,4]])\n",
        "eip_y = np.array([[5,6],[7,8]])\n",
        "\n",
        "eip_v = np.array([9,10])\n",
        "eip_w = np.array([11, 12])\n",
        "\n",
        "# Inner product of vectors; both produce 219\n",
        "print(eip_v.dot(eip_w))\n",
        "print(np.dot(eip_v, eip_w))\n",
        "\n",
        "# Matrix / vector product; both produce the rank 1 array [29 67]\n",
        "print(eip_x.dot(eip_v))\n",
        "print(np.dot(eip_x, eip_v))\n",
        "\n",
        "# Matrix / matrix product; both produce the rank 2 array\n",
        "# [[19 22]\n",
        "#  [43 50]]\n",
        "print(eip_x.dot(eip_y))\n",
        "print(np.dot(eip_x, eip_y))"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "219\n",
            "219\n",
            "[29 67]\n",
            "[29 67]\n",
            "[[19 22]\n",
            " [43 50]]\n",
            "[[19 22]\n",
            " [43 50]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "B1VysbPoWwBg",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpy provides many useful functions for performing computations on arrays; one of the most useful is sum."
      ]
    },
    {
      "metadata": {
        "id": "c4xhnB-wWxqR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "8ccf2389-2bec-4ad6-bff9-20862026bb6d"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "x = np.array([[1,2],[3,4]])\n",
        "\n",
        "print(np.sum(x))  # Compute sum of all elements; prints \"10\"\n",
        "print(np.sum(x, axis=0))  # Compute sum of each column; prints \"[4 6]\"\n",
        "print(np.sum(x, axis=1))  # Compute sum of each row; prints \"[3 7]\""
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10\n",
            "[4 6]\n",
            "[3 7]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "fYYofbn0W7kh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Apart from computing mathematical functions using arrays, we frequently need to reshape or otherwise manipulate data in arrays. The simplest example of this type of operation is transposing a matrix; to transpose a matrix, simply use the T attribute of an array object."
      ]
    },
    {
      "metadata": {
        "id": "RpTgg5jkXAVI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "86aa6d45-e391-4d11-ccb3-b71df8a1cb3d"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "x = np.array([[1,2], [3,4]])\n",
        "print(x)    # Prints \"[[1 2]\n",
        "            #          [3 4]]\"\n",
        "print(x.T)  # Prints \"[[1 3]\n",
        "            #          [2 4]]\"\n",
        "\n",
        "# Note that taking the transpose of a rank 1 array does nothing:\n",
        "v = np.array([1,2,3])\n",
        "print(v)    # Prints \"[1 2 3]\"\n",
        "print(v.T)  # Prints \"[1 2 3]\""
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2]\n",
            " [3 4]]\n",
            "[[1 3]\n",
            " [2 4]]\n",
            "[1 2 3]\n",
            "[1 2 3]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OjFHM4fKXQDQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Broadcasting\n",
        "\n",
        "Broadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array multiple times to perform some operation on the larger array."
      ]
    },
    {
      "metadata": {
        "id": "ZeI7avVCXjoZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "9c60603d-e47c-4fff-ab55-8bc0512e8228"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# We will add the vector v to each row of the matrix x,\n",
        "# storing the result in the matrix y\n",
        "eip_x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\n",
        "eip_v = np.array([1, 0, 1])\n",
        "eip_y = np.empty_like(eip_x)   # Create an empty matrix with the same shape as x\n",
        "\n",
        "# Add the vector v to each row of the matrix x with an explicit loop\n",
        "for i in range(4):\n",
        "    eip_y[i, :] = eip_x[i, :] + eip_v\n",
        "\n",
        "# Now y is the following\n",
        "# [[ 2  2  4]\n",
        "#  [ 5  5  7]\n",
        "#  [ 8  8 10]\n",
        "#  [11 11 13]]\n",
        "print(eip_y)"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 2  2  4]\n",
            " [ 5  5  7]\n",
            " [ 8  8 10]\n",
            " [11 11 13]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "xLWSAgIvX-eg",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "\n",
        "This works; however when the matrix x is very large, computing an explicit loop in Python could be slow. Note that adding the vector v to each row of the matrix x is equivalent to forming a matrix vv by stacking multiple copies of v vertically, then performing elementwise summation of x and vv. We could implement this with a different approach."
      ]
    },
    {
      "metadata": {
        "id": "BFW30VSFYDPh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        },
        "outputId": "e7ab7013-ece8-4b66-e5ed-e401e006e445"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# We will add the vector v to each row of the matrix x,\n",
        "# storing the result in the matrix y\n",
        "eip_x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\n",
        "eip_v = np.array([1, 0, 1])\n",
        "eip_vv = np.tile(eip_v, (4, 1))   # Stack 4 copies of v on top of each other\n",
        "print(eip_vv)                 # Prints \"[[1 0 1]\n",
        "                          #          [1 0 1]\n",
        "                          #          [1 0 1]\n",
        "                          #          [1 0 1]]\"\n",
        "eip_y = eip_x + eip_vv  # Add x and vv elementwise\n",
        "print(eip_y)  # Prints \"[[ 2  2  4\n",
        "          #          [ 5  5  7]\n",
        "          #          [ 8  8 10]\n",
        "          #          [11 11 13]]\""
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 0 1]\n",
            " [1 0 1]\n",
            " [1 0 1]\n",
            " [1 0 1]]\n",
            "[[ 2  2  4]\n",
            " [ 5  5  7]\n",
            " [ 8  8 10]\n",
            " [11 11 13]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "wrGBrjsZYbWA",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Numpy broadcasting allows us to perform this computation without actually creating multiple copies of v. "
      ]
    },
    {
      "metadata": {
        "id": "BRPk49dvYcd4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        },
        "outputId": "5134f075-5183-4a4b-a158-40fad5d39bb0"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# We will add the vector v to each row of the matrix x,\n",
        "# storing the result in the matrix y\n",
        "eip_x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\n",
        "eip_v = np.array([1, 0, 1])\n",
        "eip_y = eip_x + eip_v  # Add v to each row of x using broadcasting\n",
        "print(eip_y)  # Prints \"[[ 2  2  4]\n",
        "          #          [ 5  5  7]\n",
        "          #          [ 8  8 10]\n",
        "          #          [11 11 13]]\""
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 2  2  4]\n",
            " [ 5  5  7]\n",
            " [ 8  8 10]\n",
            " [11 11 13]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "AJgBYXHTYtaB",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "The line y = x + v works even though x has shape (4, 3) and v has shape (3,) due to broadcasting; this line works as if v actually had shape (4, 3), where each row was a copy of v, and the sum was performed elementwise.\n",
        "\n",
        "Broadcasting two arrays together follows these rules:\n",
        "\n",
        "1. If the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.\n",
        "2. The two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.\n",
        "3. The arrays can be broadcast together if they are compatible in all dimensions.\n",
        "4. After broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.\n",
        "5. In any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension"
      ]
    },
    {
      "metadata": {
        "id": "xpWb-vDdY2AS",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Here are some other applications of broadcasting below."
      ]
    },
    {
      "metadata": {
        "id": "qAANgovVY7s6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "a5f5d364-f4e6-4069-e0f7-4ab4df9c5b0f"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Compute outer product of vectors\n",
        "eip_v = np.array([1,2,3])  # v has shape (3,)\n",
        "eip_w = np.array([4,5])    # w has shape (2,)\n",
        "# To compute an outer product, we first reshape v to be a column\n",
        "# vector of shape (3, 1); we can then broadcast it against w to yield\n",
        "# an output of shape (3, 2), which is the outer product of v and w:\n",
        "# [[ 4  5]\n",
        "#  [ 8 10]\n",
        "#  [12 15]]\n",
        "print(np.reshape(eip_v, (3, 1)) * eip_w)\n",
        "\n",
        "# Add a vector to each row of a matrix\n",
        "eip_x = np.array([[1,2,3], [4,5,6]])\n",
        "# x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),\n",
        "# giving the following matrix:\n",
        "# [[2 4 6]\n",
        "#  [5 7 9]]\n",
        "print(eip_x + eip_v)\n",
        "\n",
        "# Add a vector to each column of a matrix\n",
        "# x has shape (2, 3) and w has shape (2,).\n",
        "# If we transpose x then it has shape (3, 2) and can be broadcast\n",
        "# against w to yield a result of shape (3, 2); transposing this result\n",
        "# yields the final result of shape (2, 3) which is the matrix x with\n",
        "# the vector w added to each column. Gives the following matrix:\n",
        "# [[ 5  6  7]\n",
        "#  [ 9 10 11]]\n",
        "print((eip_x.T + eip_w).T)\n",
        "# Another solution is to reshape w to be a column vector of shape (2, 1);\n",
        "# we can then broadcast it directly against x to produce the same\n",
        "# output.\n",
        "print(eip_x + np.reshape(eip_w, (2, 1)))\n",
        "\n",
        "# Multiply a matrix by a constant:\n",
        "# x has shape (2, 3). Numpy treats scalars as arrays of shape ();\n",
        "# these can be broadcast together to shape (2, 3), producing the\n",
        "# following array:\n",
        "# [[ 2  4  6]\n",
        "#  [ 8 10 12]]\n",
        "print(eip_x * 2)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 4  5]\n",
            " [ 8 10]\n",
            " [12 15]]\n",
            "[[2 4 6]\n",
            " [5 7 9]]\n",
            "[[ 5  6  7]\n",
            " [ 9 10 11]]\n",
            "[[ 5  6  7]\n",
            " [ 9 10 11]]\n",
            "[[ 2  4  6]\n",
            " [ 8 10 12]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "7dO6MaD4aA-e",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# SciPy\n",
        "\n",
        "Numpy provides a high-performance multidimensional array and basic tools to compute with and manipulate these arrays. SciPy builds on this, and provides a large number of functions that operate on numpy arrays and are useful for different types of scientific and engineering applications.\n",
        "\n",
        "* Image operations\n",
        "\n",
        "SciPy provides some basic functions to work with images. For example, it has functions to read images from disk into numpy arrays, to write numpy arrays to disk as images, and to resize images."
      ]
    },
    {
      "metadata": {
        "id": "wVLnRPsjaTZz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "1dd63ace-6613-4c12-8c31-a61e4af3bed0"
      },
      "cell_type": "code",
      "source": [
        "from scipy.misc import imread, imsave, imresize\n",
        "from urllib.request import urlopen\n",
        "\n",
        "# Read an image into a numpy array\n",
        "eip_in = 'https://github.com/machinelearningblr/machinelearningblr.github.io/raw/2c0aa0c2b7f3531190ed52e9eafbb303b7e8649a/tutorials/CS231n-Materials/assets/cat.jpg'\n",
        "with urlopen(eip_in) as file:\n",
        "    eip_img = imread(file, mode='RGB')\n",
        "\n",
        "print(eip_img.dtype, eip_img.shape)  # Prints \"uint8 (400, 248, 3)\"\n",
        "\n",
        "# We can tint the image by scaling each of the color channels\n",
        "# by a different scalar constant. The image has shape (400, 248, 3);\n",
        "# we multiply it by the array [1, 0.95, 0.9] of shape (3,);\n",
        "# numpy broadcasting means that this leaves the red channel unchanged,\n",
        "# and multiplies the green and blue channels by 0.95 and 0.9\n",
        "# respectively.\n",
        "eip_img_tinted = eip_img * [1, 0.95, 0.9]\n",
        "\n",
        "# Resize the tinted image to be 300 by 300 pixels.\n",
        "eip_img_tinted = imresize(eip_img_tinted, (300, 300))\n",
        "\n",
        "# Write the tinted image back to disk\n",
        "imsave('cat_tinted.jpg', eip_img_tinted)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "uint8 (400, 248, 3)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/scipy/misc/pilutil.py:482: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if issubdtype(ts, int):\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/misc/pilutil.py:485: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
            "  elif issubdtype(type(size), float):\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "M8C0QZ3zcmTl",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# MATLAB\n",
        "The functions scipy.io.loadmat and scipy.io.savemat allow you to read and write MATLAB files. You can read about them in the [documentation](http://docs.scipy.org/doc/scipy/reference/io.html)"
      ]
    },
    {
      "metadata": {
        "id": "EsKPi775c7Va",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Distance between points\n",
        "SciPy defines some useful functions for computing distances between sets of points.\n",
        "\n",
        "The function scipy.spatial.distance.pdist computes the distance between all pairs of points in a given set."
      ]
    },
    {
      "metadata": {
        "id": "fUMlNHeRdAvx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "6ca5094e-7828-4215-eb5c-01be72d05f12"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.spatial.distance import pdist, squareform\n",
        "\n",
        "# Create the following array where each row is a point in 2D space:\n",
        "# [[0 1]\n",
        "#  [1 0]\n",
        "#  [2 0]]\n",
        "eip_x = np.array([[0, 1], [1, 0], [2, 0]])\n",
        "print(eip_x)\n",
        "\n",
        "# Compute the Euclidean distance between all rows of x.\n",
        "# d[i, j] is the Euclidean distance between x[i, :] and x[j, :],\n",
        "# and d is the following array:\n",
        "# [[ 0.          1.41421356  2.23606798]\n",
        "#  [ 1.41421356  0.          1.        ]\n",
        "#  [ 2.23606798  1.          0.        ]]\n",
        "eip_d = squareform(pdist(eip_x, 'euclidean'))\n",
        "print(eip_d)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0 1]\n",
            " [1 0]\n",
            " [2 0]]\n",
            "[[0.         1.41421356 2.23606798]\n",
            " [1.41421356 0.         1.        ]\n",
            " [2.23606798 1.         0.        ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "EQEfzupDdxlQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "A similar function (scipy.spatial.distance.cdist) computes the distance between all pairs across two sets of points; you can read about it in the [documentation.](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html)"
      ]
    },
    {
      "metadata": {
        "id": "D_d3_a4qecW_",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Matplotlib is a plotting library. The most important function in matplotlib is plot, which allows you to plot 2D data."
      ]
    },
    {
      "metadata": {
        "id": "c3cwc62QeoCu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "outputId": "2408117e-f9ff-4928-8cef-75f9271fa72c"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Compute the x and y coordinates for points on a sine curve\n",
        "eip_x = np.arange(0, 3 * np.pi, 0.1)\n",
        "eip_y = np.sin(x)\n",
        "\n",
        "# Plot the points using matplotlib\n",
        "plt.plot(eip_x, eip_y)\n",
        "plt.show()  # You must call plt.show() to make graphics appear."
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAe0AAAFKCAYAAAAwrQetAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XlUW/eZN/Dv1QoCARJIYt9XY7Pj\nDW/xEqdOnKZtHNudpJlOpn3b6TrjdJJx54z7nqZp2mOf03aad6bJJO00nU5cZ9yO7SS2s9hJbLAx\nizFgFgNmXySBWIRA633/YEm8ARaS7r3S8zknJxbS5T78EHp+97m/hWFZlgUhhBBCeE/EdQCEEEII\nWRpK2oQQQohAUNImhBBCBIKSNiGEECIQlLQJIYQQgaCkTQghhAiEhOsAFmMwTHj0+6lUCphMFo9+\nT0Lt6k3Utt5B7eod1K7Lp9Eo7/lcwF1pSyRirkPwS9Su3kNt6x3Urt5B7epdAZe0CSGEEKGipE0I\nIYQIBCVtQgghRCAoaRNCCCECQUmbEEIIEQhK2oQQQohAUNImhBBCBIKSNiGEECIQy0rara2t2L59\nO/7whz/c8Vx5eTkef/xx7N27Fy+//PL811988UXs3bsX+/btw7Vr15ZzekIIISSguL2MqcViwY9/\n/GOsW7furs+/8MILeO2116DT6fDkk09i586dGBkZQVdXF44ePYr29nYcPHgQR48edTt4QgghJJC4\nnbRlMhleffVVvPrqq3c819PTg/DwcMTExAAANm/ejIqKCoyMjGD79u0AgLS0NIyNjcFsNiM0NNTd\nMMh9Mo5NYWTcislpOyzTDlimHQiSi5GVEAFNRDAYhuE6REIID9kdLrT2jmJyyg6Xi4WLZeFyARGh\nMmQlRkBKy5f6hNtJWyKRQCK5++EGgwFqtXr+sVqtRk9PD0wmE3Jzc2/5usFgWDBpq1QKj69lu9Bi\n7P7IMm3HJ1f78H5lN5q7TPd8XVR4EFamRyE/XYPNRXH3/UcYaO3qS9S23kHtujCr3Yma5iFcrBtA\n5fVBTFkdd31dkEyMwiwtVq/QoSRIRu3qRZzu8sWy7KKv8fRuMRqN0uM7h/HVkMmCExc6Ud2ih83h\nAgMgN1mF5JgwKIIkCAmSQiGXYGzShpZuE1p6RnG+uhfnq3vxX6ebsOeBdJRkaZZ09R1I7epr1Lbe\nQe16b3aHC+9c6sLpy92w2p0AZjr1G/NioFUFQ8QwEIkYMAwwYLSgts2IivoBVNQPQCxisKM0AZ8v\nS4FcRlff7lio0+OVpK3VamE0GucfDw0NQavVQiqV3vJ1vV4PjUbjjRACGsuyOH+1H0c/vAGb3QWt\nKhhlq2JQtjIa6rCgux6zrTgeLMuif9iCT+r68UF1L/7tLw1IjwvH3m3pSIsN9/FPQQjhwo3eUfzu\n3WYMDFsQHirD9pJ4FGdpkKRT3rMD/8TWdAwMT6KubRjn6/px+nI3KpuG8OXtmSjMiKLbbh7klaQd\nHx8Ps9mM3t5eREdH49y5czh8+DBMJhP+9V//Ffv27UNjYyO0Wi3dz/Yw04QVv323CQ0dIwgJkuCv\nP5eNNTm6Jf3RMAyDuKgQ7NuWgQeK4vDWuXZUtxrwk99X48HSBDzxQDpEIvrjI8QfTVkdeOujdpyr\n6QMD4IGiODy+OQ3B8qWliZjIEMREhmDPg1n43YkGnL7cjV8fr0d+WiS+8lA2VEq5d3+AAMGwS6lR\n30VDQwN+9rOfoa+vDxKJBDqdDlu3bkV8fDx27NiBK1eu4PDhwwCABx98EM888wwA4PDhw6iqqgLD\nMDh06BCys7MXPI+ny1f+XBKrvWHA6283YXLagZUpanx1V86y/1Bae0bxn6dnet2FGVH4+qO5kEvv\nLHn5c7tyjdrWO6hdPzUyPo3Db17F4IgFMZEKfPVzOUiPd6+6Nteu/cZJ/OFsC5q7R6EOk+PA3gLE\nRIZ4OHL/tFB53O2k7SuUtJfm8vUhvHryOiQSBnsfSMeWwjiPlaQs03a8/OcGNHWZkBIThu8+nofw\nENktr/HXduUDalvvoHadMWSy4PB/12J43IodJQl4fEsapBL3l/D4bLuyLIt3LnXhfz7qQGiwFH//\nRD5SYsI8FbrfWihp04pofuBS4yBeOdkIuUyEH+wvxANF8R69h6QImvljK1sZjZsD4/jJ76swMDzp\nse9PCOFGr96Ml/5Qg+FxK764KRX7tqUvK2HfjmEYPLwuGX/9uWxMTtvx8z/WorFzxGPfPxBR0ha4\nisZBvHrqOoJkEhzYW+i1AWMSsQh/83AOHtuQAuPYNF76rxroR6e8ci5CiPd19I/jZ3+swdikDX+1\nIxOPrE/22oCxTfmx+LvHVsHpYvGLP9WhqlnvlfMEAkraAlbeMID/OHUdwTIJnt1XgNRY75adGIbB\noxtS8Fc7MjFhseOXx+owOW336jkJIZ7XazDj8Ju1sFgdeObhHGwrjvf6OYuzNPiHJ/IhlYjwmxON\naO0Z9fo5/RElbYFq6hzBa283QSGX4Nn9BT69T7StOB4PliZgYNiC//fnBjicLp+dmxCyPOYpO/71\nf65h2ubE13avQNmqGJ+dOztJhe98KQ8A8Ovj9TCOUbXuflHSFqCR8Wn8+4lGiBgG33s8H8nRvh/Y\n8cQD6SjMiEJTlwm/P9OypIVyCCHccrpc+M3/NsAwOo1H1idh7Ypon8eQk6TCl7dnwDxlx6/eqse0\n7e6rrJG7o6QtMA6nC//2lwZMWOzYty3D7WkZyyUSMfj67lwkRStx4doA3vrwBidxEEKW7q3z7Wjs\nNCE/LRKPbUzlLI4HiuLxQGEceg1m/MepJrio079klLQF5s0PbqC9fxxrc3XYWhTHaSxymRjfezwP\n6jA5fv9OExo6hjmNhxBybxWNgzhT2YNotQJf250LEcerlO3fnoHsxAjUtBrwv5/c5DQWIaGkLSAV\nDYP4sKYPcZoQPL0zmxdLA0aEyvGdL+ZBImbw+jtNME/RwDRC+KZ7aAK/e7cZwXIxvvOlVVAEcbrt\nBICZGSnffGwlosKDcLK8Ew03qdO/FJS0BaLPYMZ/np75o/v2F1bxaiH+pGgl9j+YjVGzDf/1XivX\n4RBCPsPhdOE/TjXB7nDha7tzebUqmVIhw7e+sApiEYPfvdsMyzTd314MJW0BcLlYvP5OM2wOF/5m\n1wro1AquQ7rDlx5IR1pcGC5fH0Jl0xDX4RBCZr1T0YVegxmb8mNRkB7FdTh3SIpW4uF1SRgZt+JP\n52hszGIoaQvABzW9uDkwjjUrdCjO4ueuaGKxCH/78ArIpCK8caYFpgkr1yEREvB69WacLO+ESinH\nEw+kcx3OPT2yPhkJ2lB8XDdAY2MWQUmb54bHpnH8ow6EBEmwf1sG1+EsSKdWYO8D6ZicduC37zbR\nNDBCOOR0ufDaO01wulg8/VAWL+5j34tELMIzD+dALGLwWyqTL4iSNo+xLIs3zrbAandi37YMhN22\nSQcfbSmMw8oUNRo6RvDJtQGuwyEkYJ2+3I2uwQmsXxmNvDT+lcVvl6hT4pH1yTBNWHGUppDeEyVt\nHqts0uNa+zBWJKuwfqXvF0FwB8Mw+OquHATJxHjrfDstc0oIB/qNk/jfC50ID5FhH88rdJ/18Lok\nJGpD8ck1KpPfCyVtnjJP2fHH91shk4jwlZ1ZvJjetVQqpRy7y5JhnrLT/EtCfIxlWfz+TAscThee\n2pmF0GAp1yEt2dzGRAwD/PH9G7RE8l1Q0uapt863YcJix+c3pkCr4t9o8cVsL06AVhWMD2v60Gek\nbTwJ8ZWaViNae0ZRkB6Fokx+DlxdSKJOic0FcRgcseB8bR/X4fAOJW0e6tWb8cm1AcRpQvBgaQLX\n4bhFKhFh37YMuFgWb77fSoPSCPEBh9OFY+fbIBYx2PNAGtfhuO2xjSkIlovxvxdu0i2221DS5qG3\nPmoHywJ7tqRDLBLuryg/LRIrU9Ro7DThapuR63AI8Xsf1vRBb5rClsI4Xi2icr/CFDI8sj4Zk9MO\nnLzYyXU4vCLcjOCnmjpHcK19GNmJEViVquY6nGVhGAb7tmVALGJw9IM22B10f4oQbzFP2XHy4k0E\nyyV4tCyZ63CWbXtxAqLCg/BBdS+GRixch8MblLR5xMWy+NP5dgDAngfSBTX47F5io0KwtSge+tEp\nnL3SzXU4hPitU+WdmJx2YPf6ZCgV/J8euhipRIQnHkiH08XiT+fauA6HNyhp80hl0xC6BiewZoUO\nKTG+3yPbWz6/IRmhwVK8c6mLNhQhxAuGTBZ8UN2LqPAgbCuO5zocjynO0iAzPhy1N4xo6jJxHQ4v\nUNLmCbvDheMfdUAsYvDFTdztc+sNiiApdq1NwpTVSVfbhHjBW+fb4XSxeHxLGqQS//lYZxgGe2fn\nmf/pwzYa0ApK2rxxrqYXxrFpbCuOhyYimOtwPO6BojiEhcjwXlUvXW0T4kGdg+OobjEgLTYMpdla\nrsPxuJSYMKzO0aJraIIGtIKSNi9MWR04Wd6JYLkEj6xP5jocr5BLxdi1NglWmxOnL9PVNiGeMje6\n+gubUv1iHMzd7C5LAQPgxMXOgL/apqTNA+dq+zA57cDO1QmCWr3ofm0piEV4qAwfVPdi3GLjOhxC\nBK97aAK1N4xIiwtDTpKK63C8Ji4qBCXZWnQNTuBae2Avb7qsbV9efPFF1NXVgWEYHDx4EHl5eQCA\noaEhPPvss/Ov6+npwYEDB2C32/HLX/4SiYmJAID169fjm9/85nJCEDyb3Ymzld0Iloux3Y8GkNyN\nTCrGw2uT8Mf3b+D05W5ebxVIiBCcLO8EADxaluK3V9lzdpcl40qzHicu3kReWqTf/7z34nbSrqys\nRFdXF44ePYr29nYcPHgQR48eBQDodDq88cYbAACHw4GnnnoKW7duxZkzZ7Br1y4899xznoneD3xc\n149xix0Pr0uCIsh/r7LnbC6IxbuXu/FhTS92rk5EuAB2LiOEj3oNZlS3GJASo8TKFGGv6bAU8ZpQ\nlGRpUNViQH3HCPLSIrkOiRNul8crKiqwfft2AEBaWhrGxsZgNpvveN2f//xn7Ny5EyEhwl2dx1sc\nThfevdwNmVSEHQJdrvR+SSViPLwuCTa7C+9e6uI6HEIE69TsVfbuALjKnrO7LAUAcOLizYC9t+32\nlbbRaERubu78Y7VaDYPBgNDQ0Fted+zYMbz++uvzjysrK/HMM8/A4XDgueeew4oVKxY8j0qlgEQi\ndjfMu9JolB79fu46e7kLpgkrHt2UirQk4fcal9quX9yWidOVPThf24cnH14BlTLIy5EJH1/es/5G\nqO3aMzSBK816pMaFY/vaZN4lbW+1q0ajxLpVMaioH0DvyDSK/HC0/GKWdU/7s+7W66mtrUVqaup8\nIs/Pz4darcaWLVtQW1uL5557DidPnlzw+5pMnl2+TqNRwmCY8Oj3dIfT5cLR91ogETPYvCqGFzEt\nx/22687SBPzXe604drYFX/Czeemexpf3rL8Rcru+8fZ1sCzwudWJMBrvrHByydvturMkHhX1A/j9\nO42IVwfxrsPiCQt1etwuj2u1WhiNn86Z0+v10Ghu3Qbu/PnzWLdu3fzjtLQ0bNmyBQBQWFiIkZER\nOJ1Od0MQtCtNeuhNU9iwKgYqpZzrcHxuQ14MQoOl+LCmF1Z7YL4HCHHHkMmCS9cHEa8JQWFmFNfh\n+FyiTonCjCi0942jpXuU63B8zu2kXVZWhjNnzgAAGhsbodVq7yiN19fXIzs7e/7xq6++ilOnTgEA\nWltboVarIRZ7tvQtBC6WxdsVXRAxDD63NonrcDghl4qxpTAOk9MOXKwf4DocQgTj7JUesCzwyPpk\niPzwKnMp5j43z17p4TgS33O7PF5UVITc3Fzs27cPDMPg0KFDOH78OJRKJXbs2AEAMBgMiIz89F7t\n7t278YMf/ABvvvkmHA4HfvKTnyz/JxCgujYj+oyTWL8y2i9XP1uqbcXxOH25C2ev9GBLQRxEosD8\nACJkqcxTdlysH0BkWBCKszSLH+Cn0uPCkRYbhro2I4ZGLNCpFVyH5DPLuqf92bnYAG65qgZwx/3q\n6Ojo+alggey92d7hQ2sSOY6EW+EhMqxfGY2P6wZQe8MY0B9ChCzFx3X9sNld2LYhHmJRYK+N9eDq\nRPzbXxrwXlUPnnwwi+twfCawf+sc6NGb0dw9ihXJKsRrQhc/wM89WDrTcTlTSUubErIQh9OFD6p7\nIZeJsSk/lutwOFeUGYXIsCBcqB8IqP0MKGn72HtVM1fZ20sCY172YmKjQpCXFom2vjG09Y1xHQ4h\nvFXVoodpwooNq2KgCPLYxB/BEotE2F4SD5vdhY+u9nEdjs9Q0vahcYsNlxqHoFUFB+xqPnfz0Gq6\n2iZkISzL4r0rPWAA7Cjx7+WO78fGvFgEycT4oLoXDqeL63B8gpK2D310tR8OpwvbiuMDdtTn3WQl\nRiApWomaFgP0Hp6XT4g/aOsbw82BCRRkREGrCpxBV4tRBEmwKT8Wo2YbrjTpuQ7HJyhp+4jD6cK5\nml4EycTYsCqG63B4hWEY7FydABbA+9W9XIdDCO/MTW16MECWO74f24vjwTDAmSvdAbG0KSVtH6lq\n1mPUbMOGvBgEy+l+1O1KsrQID5HhYv0grDZabIWQOYbRKdS0GpCoC0VmQgTX4fBOVEQwirO06B4y\nB8RiK5S0feS9ql4wgN9vv+kuiViETfmxmLI6cLlpiOtwCOGND6p7wbIzV9n+uGSnJzw4O7D3wxr/\nr9RR0vaB9r4x3BwYR3463Y9ayOaCWIgYBudq+gKizEXIYmx2Jy7WDyBMIUVpto7rcHgrLS4MCdpQ\n1N4wYtRs5Tocr6Kk7QMfzN6npVGfC1OHBSE/PRJdQxO4OSDMjRwI8aQrzXpMTjuwIS8WUgl9XN8L\nwzDYUhgHp4vFJ9f8e1lkehd42YTFhqoWPWIiFchOUnEdDu9tLZrp2JwLgDIXIYv56Go/GACbCmgx\nlcWsXaGDXCbGx1f74HL5b6WOkraXlTcMwuFksTk/lu5HLUFOsgo6VTAuN+kDapUjQm7XqzejrW8M\nuSlqaAN4j4KlCpZLsG6FDsPjVtR3DHMdjtdQ0vYilmXx0dV+SMQirKdpXksimi1zOZwuXPDzMhch\nCzk/u8rXlsI4jiMRjs0FM211vtZ/V0ijpO1FrT2jGByxoCRbg9BgKdfhCEbZqhhIJSKcr+2Diwak\nkQBktTlR0TiIiFAZ8tNp9cSlSopWIjU2DNfah2Ecm+I6HK+gpO1FH13tBwBspsX970tosBRrcnTQ\nj07heucI1+EQ4nOXm4YwZXViU35swO/mdb+2FMSBxcyOaP6I3g1eYp6yo6pFj2i1ghZEcMMDRTNl\nrnM1/lvmIuReztf2gWFAu3m5oTRHC4Vcgo/rBvxyPXJK2l5SXj8wMwCtgAaguSMlJgxJOiXq2oYx\n5ufzLgn5rM7BcXQOTiA/LQrqsCCuwxEcuVSM9auiMT5pw9UbRq7D8ThK2l7Asiw+quuHRMxg/cpo\nrsMRrA15MXCxLMobB7kOhRCfOV87e1uNpnm5bcvsgLRzfjggjZK2F9zoHcPAsAUlWVooFTKuwxGs\nNSt0kIhFuHBtgFZIIwFh2ubA5etDiAyTY1UqDUBzV2xUCDLiw9HcZfK7AWmUtL1gbkN26ikvT2iw\nFEWZURgYtqC9f5zrcAjxuivNeljtTmzIi4VIRLfVlmPDqhiwAMrr/atSR0nbwyzTdlxpNkBHA9A8\nYmPeTMfnwjX/HAlKyGddnE0wdFtt+UqytZBJRbhQP+BXU0cpaXtYZZMeDqcLG1ZF0wA0D8hJUiEy\nTI7LTXraspP4Nb3JgtaeUWQnRkBDK6AtW7BcgtIsLYxj02j1oy07KWl72MX6ATAMsH4lrYDmCSIR\ng7JVMbDanKhq0XMdDiFeM3eVXUarJ3rMhryZtrxQ7z+rK1LS9qCB4Um0949jRbIaKqWc63D8xtyH\nmL/v3kMCl4tlUd4wALlMjJIsLdfh+I3MhAhoIoJQ1aLHlNXBdTgeQUnbg8ob5nrKdD/KkzQRwchJ\nUqG1ZxRDIxauwyHE45q7TBget6I0Wwu5TMx1OH6DYWYqdTa7C1ea/aNSR0nbQ1wuFuUNgwiWi1GU\noeE6HL/jj2UuQuZcnH1fb6DSuMeVrYwBg0/bWOgk7h744osvoq6uDgzD4ODBg8jLy5t/buvWrYiO\njoZYPNNjPHz4MHQ63YLHCF1TtwmmCSs25cdCJqWesqcVZ2rwB7kEF+sH8IWNqTQdhvgNy7QD1S0G\naCOCkREfznU4ficyPAg5ySpc7zRhaMQCnVrBdUjL4lbSrqysRFdXF44ePYr29nYcPHgQR48eveU1\nr776KkJCQu7rGCGb68VRadw7ZFIx1uRocf5qP5q6TMhNUXMdEiEeUdWih83hQhnNOPGaDaticL3T\nhAv1A/jS5jSuw1kWt8rjFRUV2L59OwAgLS0NY2NjMJvNHj9GKKasDtS0GKBVBSM9jnrK3rJudu7q\n3NgBQvzBhfoBMKAZJ95UlKlBsFyC8oZBuFzCnrPt1pW20WhEbm7u/GO1Wg2DwYDQ0ND5rx06dAh9\nfX0oLi7GgQMHlnTM3ahUCkgkni03azRKj36/s5e7YHO48OCaJGi1YR793kLi6Xa9XVRUKHTvNKP2\nhgHKsGAEyd2+uyM43m7bQMV1u/YbzGjrHUNBhgbZ6f4zFobrdr2bTYVxOHOpCwNj0yjIFO4IfY98\n6t2+LvR3v/tdbNy4EeHh4fjWt76FM2fOLHrMvZhMnh0trNEoYTBMePR7nim/CQZAfora499bKLzR\nrnezOluLk+WdeK/iJtbmBsatCF+1baDhQ7ue+rgDAFCapeE8Fk/hQ7veTWFaJM5c6sLp8puIU/F7\n8ZqFOj1ulce1Wi2Mxk+3PNPr9dBoPu0lPvbYY4iMjIREIsGmTZvQ2tq66DFCpTdZ0No7huwkFSLD\naRs9b1ubqwMA2vmLCB7Lsrh0fRAyqQiFmVFch+P30uPDERkWhOoWA2x24a6u6FbSLisrm796bmxs\nhFarnS9zT0xM4JlnnoHNZgMAXLlyBRkZGQseI2SXrg8BoLWCfSUmMgQpMUo03hzB2KSN63AIcVtH\n/zgMo9MoytAgSBY4t3q4ImIYrM3VYdrmxNU24e6z7dY7paioCLm5udi3bx8YhsGhQ4dw/PhxKJVK\n7NixA5s2bcLevXshl8uxYsUKPPTQQ2AY5o5jhI5lWVxqHIJUIkJRpvCrBkKxLjcaNwcmUHl9CDtK\nE7gOhxC3XGqc6fAHym0ePlibG423K7pwqXEIq3N0XIfjFre7d88+++wtj7Ozs+f//fTTT+Ppp59e\n9Bih6x4yY3DEgtJsLYIDaFAU11bn6PDmB20obxykpE0EyeF0obJ5CEqFFLkpKq7DCRhxUSFI1Iai\nvmMYExYblAoZ1yHdN1oRbRkuXZ+5r7p2hTB7bEIVFiLDylQ1ugYn0G+c5DocQu7b9U4TJix2rM7W\nQSyij2FfWpsbDaeLRZVAlzWld4ubXC4Wl68PQSGXYGVqJNfhBJy5AWlzHSdChGS+w59LHX5fW7NC\nBwZAxex4JKGhpO2mlp5RjJptKMnWQiqhZvS1wgwN5DIxKhqG/GqDe+L/rDYnaluN0EYEIzU2cNd1\n4IpKKUd2kgptvWMwjE5xHc59o2zjpstUGueUXCpGSaYGw+PTuNHjPxvcE/9Xe8MAq905c8VHy5Zy\n4tNKnfCutilpu8HucKGq2QCVUo7MxAiuwwlYc6NuK5uEeW+KBKa5REGlce4UZ2ohEYtwqXFwyQt9\n8QUlbTfUdwzDYnVgTY4OIuopcyY7KQJhCimuNOvhdLm4DoeQRY1P2tDQMYKkaCViIkMWP4B4hSJI\ngoKMKAwMW9A1xL/V2xZCSdsNcz3lNVQa55RYJEJJthbmKTuaukxch0PIoq406+FiWayjzw7Ozf0O\nLgusRE5J+z5NWR2oazMiJlKBRJ3wV3QTurkFEiqvU4mc8N/l60NgGGA1JW3OrUyNRLBcMt+REgpK\n2vepptUAu8OFtTSIhBfS48OhUspRPft7IYSvRsan0dY3hqyECESEyrkOJ+BJJSIUZURhZNyKjr5x\nrsNZMkra9+lyE5XG+UTEMFido8WU1YGGm8Nch0PIPc0NmBTq8pn+aK7iMfe5LgSUtO+DecqOpk4T\nkqOV0KoUXIdDZs2XyGkUOeGxK81DEDEMirNonwK+yElSITRYiqpmPVwuYZTIKWnfh+oWPZwulnrK\nPJMcrYQ2Inhm/qtNuFvuEf+lH53CzYEJ5CSrBLnetb+SiGc2exqbtKFVIOs9UNK+D1dm16otyaae\nMp8wDIPVK7Sw2V2oaxfulnvEf12ZLb+uztZyHAm53Zqcmd9JpUBK5JS0l2h80oamLhPSYsMQFR7M\ndTjkNlQiJ3x2pUkPsYhBEZXGeScrUYWwEBmqWgxwOPk/mJWS9hJVtxrAskAp9ZR5KV4TirioEFxr\nH4Zl2sF1OITMGxieRLfejNwUNUKCpFyHQ24jEjEozZpZ76FZAOs9UNJeornyVgklbd5anaOFw+lC\n7Q0D16EQMu/K/Khx+uzgq9L5Ejn/K3WUtJdgzGxFS/co0uPDoQ4L4joccg9zJXIhTd8g/q+yWQ+J\nWITCDCqN89Xceg81AljvgZL2ElS1GMCCBpHwnU49s0pdU6cJ5ik71+EQgl6DGf3GSeSlzay+RfhJ\nxDAozdbCYnWg8eYI1+EsiJL2ElQ2DYEBUJxFSZvvSrO1cLpYXL1Bo8gJ9yqpNC4Y84NZm/ldqaOk\nvQjThBU3eseQmRABlZKWHuS7uTEHVS38vzdF/BvLsrjSNASZVIT8tCiuwyGLSIlRIio8CFdvGGF3\n8He9B0rai5ibm009ZWHQqRRI1Iai8eYILNNUIifc6dGbMWSaQl5aFOQyMdfhkEUwDIOSLC2mbU40\n8LhETkl7EVeaZ3blKaLSuGCUzJbIa6lETjhU1TIzi4GmiQrHfKWumb8zUChpL2BkfBrtfePITlQh\nPISWHhSKuQ/JuSoJIb7GsiyqmvWQSURYlarmOhyyRCkxSkSGyXG1jb+jyClpL6B6tqdMc7OFRadW\nIIFK5IRDfcZJDI5YsCo1EkF73lF0AAAgAElEQVQyGjUuFAzDoDhLiymrE9c7+Vkip6S9gKoWPRgA\nRZk0v1JoqEROuFQ1v08BdfiF5tMSOT8rdW4n7RdffBF79+7Fvn37cO3atVueu3TpEp544gns27cP\n//RP/wSXy4XLly9j7dq1eOqpp/DUU0/hxz/+8bKD9ybThBVts6PGqTQuPKU8/8Mj/q26xQCJWIS8\ntEiuQyH3KTU2DCqlHLU3jLxci9ytuk1lZSW6urpw9OhRtLe34+DBgzh69Oj88//yL/+C3//+94iO\njsZ3v/tdfPLJJwgKCsLq1avxq1/9ymPBe1NN68yCKtRTFqZotQLxmlA0do7AMu2AIohKlMQ3+o2T\n6DNOojAjihZUEaC5Pc/fr+rF9U4T7zpebl1pV1RUYPv27QCAtLQ0jI2NwWw2zz9//PhxREdHAwDU\najVMJv4vwn676tl5vlQaF67SbA0cThZX2/g7EpT4n7k1AqjDL1ylPF7vwa1uoNFoRG5u7vxjtVoN\ng8GA0NBQAJj/v16vx8WLF/G9730Pra2taGtrwze+8Q2MjY3h29/+NsrKyhY9l0qlgETi2TmOGo1y\nwedNE9No7RlFTrIamam0KMJSLdauvvbg+hT8+ZObuNZhwucfyOQ6nGXhW9v6C2+069W2YUjEImxb\nk4yQ4MDc1Uvo79fIyFCoT1xHXZsRKnUIJGL+DP/ySO2GZdk7vjY8PIxvfOMbOHToEFQqFZKTk/Ht\nb38bn/vc59DT04OvfOUrOHv2LGSyhe8Xm0wWT4Q4T6NRwmCYWPA152v74GKB/FT1oq8lM5bSrr4m\nZ4B4TQhqWobQ3WsSbKmSj23rD7zRroMjFnQOjCM/LRIW8zQs5mmPfn8h8Jf3a2FGFD6o7sUnVd1Y\nmerbEvlCnR63ug9arRZG46ejcvV6PTSaT8vIZrMZX/va1/D9738fGzZsAADodDrs2rULDMMgMTER\nUVFRGBri5xqvcyURWmtc+EqytHA4WdS10yhy4n00atx/8LVE7lbSLisrw5kzZwAAjY2N0Gq18yVx\nAHjppZfw9NNPY9OmTfNfO3HiBF577TUAgMFgwPDwMHQ63XJi94oJiw3NXaNIiQlDZDhtwyl0RVkz\nncm5OfeEeFNVix5iEYOCDLqtJnTpceEID5GhptUIp4s/o8jdqhcWFRUhNzcX+/btA8MwOHToEI4f\nPw6lUokNGzbgL3/5C7q6uvDWW28BAB555BE8/PDDePbZZ/HBBx/AbrfjRz/60aKlcS7U3jDCxbIo\nyaYBaP4gLioEOrUC9R3DsNqdkEtpDWjiHXqTBd1DZqxKjURIUGDey/YnIhGDoiwNztX0oaV7FCuS\n+bGynds3+Z599tlbHmdnZ8//u6Gh4a7H/Pu//7u7p/MZKo37l5lNADR4u6ILDR3D9HslXjO/gmIW\ndfj9RUnmTNKubjXwJmnzZ0gcD0xO29HUaUKSTgltRDDX4RAPKaYSOfGB6lYDRAyVxv1JZmIEQoOl\nqGk1wHWXAddcoKT9GVdvGOF0sfMf8sQ/JOlm9smtazfydhMAImwj49Po6B9HVmIElAr+3fYj7hGL\nRCjIiMKY2YaOvnGuwwFASfsWNa0zV2KUtP0LwzAoytRgyupEUxc/NwEgwkafHf5r7nYHX0aRU9Ke\nNW1zoOHmCOKiQhATGcJ1OMTDSrLmpm9QiZx43lzSLsygpO1vcpLUCJaLZ5a25kGJnJL2rIaOEdgd\nLlq21E+lxoUhPFQ2ewuESuTEc8YtNrT0jCI9LhwqpZzrcIiHSSUi5KdFwTg2je4h8+IHeBkl7Vmf\njhqnpO2PRLMlcvOUHS3do1yHQ/zI1RtGsCztU+DP5n631a3cl8gpaQOwO5yoax+GJiIICdrQxQ8g\nglQy/4dHJXLiOdTh93+rUiMhk4h4MQOFkjaA650mWG1OFGdqwTAM1+EQL+Hj9A0ibJbZaaKJulBo\naJqo35LLxFiVGomBYQv6jZOcxkJJG59eeRVRT9mviUUiFM5O32jvG+M6HOIH6tqGZ6eJ0qI9/u7T\nJZG5LZEHfNJ2uly4esOIiFAZUmPDuA6HeNnchysfylxE+OY6/MV0P9vv5adFQSxiOP/sCPik3do9\nCvOUHUWZGoioNO73cpJUvJq+QYTLanOioWMYMZEKxEbRNFF/pwiSYEWyGt16M/SjU5zFEfBJm3rK\ngUUqESFvdvpGj5776RtEuOo7hmFzuGgAWgCZ+13XcHi1HdBJ28WyqGk1IDRYiszECK7DIT4y10Hj\nusxFhG1+FbRMup8dKAoyosAwn/7uuRDQSbujfxyjZhsKMqIgFgV0UwSUlalqSCUiTv/wiLA5nC7U\ntRsRFR6ERB1NEw0UYQoZMuMj0N43hlGzlZMYAjpTzZU4aFGEwBIkkyA3WY0+4yQGRyxch0MEqKnL\nhCmrE0WZGpomGmCKsjRgAdTeMHJy/oBN2uxsaTxIJkZusorrcIiPzd+boqtt4oZq6vAHrKKMufva\n3Ez9Ctik3WuYhH50CnlpkZBKxFyHQ3wsPz0KIob76RtEeFwuFldvGBCmkCI9LpzrcIiPRYYHITla\niebuUUxO231+/oBN2nNXWNRTDkyhwVJkJUbg5sA4RsanuQ6HCEhb3xjGLXYUZmogElFpPBAVZ2ng\ndLGoa/N9iTxgk3Z1iwESMYNVqZFch0I4QiVy4g4qjZMiDmegBGTS1pss6DWYsSJZjWC5hOtwCEfm\n9j6mpE2Wam4sTLBcjJwkGgsTqGIiQxATqUDjzRFYbU6fnjsgk3ZN60xJgxZUCWwqpRxpsWFo6RnF\nhMXGdThEALqHzBgen0Z+WhQk4oD8+CSzijI1sDlcaLg57NPzBuS7rqbVAIYB8jOiuA6FcKwoSwOW\nndkTmZDFVNNYGDKLq9trAZe0R8an0dY3hqyECIQpZFyHQzhWRHtsk/tQ02qAVCKisTAESTolIsPk\nuNo2DIfT5bPzBlzSvtwwAAAopJ4yAaBTKRCvCcH1zhFMWR1ch0N4bGB4Ev3GSaxMUUMuo2migY5h\nGBRmajBldaC5y+Sz8wZc0i6vn0nacxPkCSnK1MDhZFHf4dt7U0RYaJooud3cuKi6dt99dridtF98\n8UXs3bsX+/btw7Vr1255rry8HI8//jj27t2Ll19+eUnH+MLktB31bUYkRysRGR7k8/MTfpr7EKZR\n5GQhNa0GiBgG+ek0FobMyIiPwIa8GGTE+26RHbfmO1VWVqKrqwtHjx5Fe3s7Dh48iKNHj84//8IL\nL+C1116DTqfDk08+iZ07d2JkZGTBY3yhrs0Ip4ulnjK5RYI2FFHhQbjWPgy7wwWpJOAKUGQRI+PT\nuDkwgZwkFUKDpVyHQ3hCJGLwN7tyfHtOdw6qqKjA9u3bAQBpaWkYGxuD2TyzN3FPTw/Cw8MRExMD\nkUiEzZs3o6KiYsFjfGV+qhftf0s+g2EYFGVqMG1zoqlrhOtwCA/NbQ5Bnx2Ea25daRuNRuTm5s4/\nVqvVMBgMCA0NhcFggFqtvuW5np4emEymex6zEJVKAYmH1ga3OV3ISIhAXna0R74fuZVGo+Q6BLdt\nW5OEs1d60Ng1im1rU7gO5w5Cbls+W2q71t+c6cxtX5uMyPBgb4bkF+j96j0eWQ6MZVmvHWMyeW7r\nxG89thIajRIGw4THvieZIfR2jQyRIixEhksNA9i7JY1Xa0oLvW35aqntOmGxoaF9GKmxYXDZHPS7\nWAS9X5dvoU6PW+VxrVYLo/HTxSj0ej00Gs1dnxsaGoJWq13wGF+RS8WQS2mqBrmTiGFQmBGFCYsd\nN3pHuQ6H8MjVNiNcLEsrKBJecCtpl5WV4cyZMwCAxsZGaLXa+TJ3fHw8zGYzent74XA4cO7cOZSV\nlS14DCF8UDw/ipxWRyOfqp19P9AAVsIHbpXHi4qKkJubi3379oFhGBw6dAjHjx+HUqnEjh078KMf\n/QgHDhwAAOzatQspKSlISUm54xhC+CQ7SYVguQQ1rXrs25YOhuFPiZxwY9rmQMPNEcRFhUCnVnAd\nDiHu39N+9tlnb3mcnZ09/+/S0tK7Tue6/RhC+EQiFiE/LRKXrg+he8iMpGgaTBPo6jtG4HC66Cqb\n8AZNSCXkM2gtcvJZtAoa4RtK2oR8xspUNaQSEa2ORmB3uHCt3YjIsCAk6mj8DeEHStqEfEaQTILc\nZDX6jZMYGJ7kOhzCoaYuE6asThRnaWh8A+ENStqE3IarfXIJv1BpnPARJW1CbpOfHgURw1DSDmAu\nF4urNwwIU0iRHue7zSAIWQwlbUJuExosRXZSBG4OTGBkfJrrcAgH2vrGMG6xoyBDw6vV8QihpE3I\nXRTTdp0Brbpl5vdOG4QQvqGkTchdFGRQ0g5ULMuiplWPYLkYOUkqrsMh5BaUtAm5C5VSjrS4MLT0\njGLcYuM6HOJDXUMTGB63Ij89ChIxfUQSfqF3JCH3UJypBcsCV2/QWuSBZL40TqPGCQ9R0ibkHooy\nowBQiTzQ1LQaIJOIsDIlkutQCLkDJW1C7kGrUiBBG4rrnSOYsjq4Dof4wMyiOhasSo2EXEbb+BL+\noaRNyAKKMjVwOFlcax/mOhTiA3NrzhfRqHHCU5S0CVlAMW0gElBqWgwQixjkp1FpnPATJW1CFhCn\nCYFWFYz69mHY7E6uwyFeZBydQtfQBHKSVVAESbkOh5C7oqRNyAIYhkFxpgZWuxONN0e4Dod40Vw1\nhUaNEz6jpE3IIubub1KJ3L9VtxrAACjMoKRN+IuSNiGLSIkJg0opx9UbRjicLq7DIV4waraivXcM\nGQkRCAuRcR0OIfdESZuQRYhmS+QWqwPNXSauwyFeUHvDCBZUGif8R0mbkCWY2ziiqkXPcSTEG6pn\nf6+0dzbhO0rahCxBRvxM2bSm1Qini0rk/sQ8ZUdz1yhSYsIQGR7EdTiELIiSNiFLIBIxKMrUwDxl\nR2vPGNfhEA+qbTXAxbIoyaarbMJ/lLQJWaK5Enk1lcj9StX83tlajiMhZHGUtAlZoqyECIQESVA9\ne2VGhM8ybcf1zhEk6kKhjQjmOhxCFkVJm5AlkohFKMzQYMxsQ0ffONfhEA+42maE08XSVTYRDIk7\nB9ntdjz//PPo7++HWCzGT3/6UyQkJNzymnfeeQevv/46RCIR1q1bh7//+7/H8ePH8ctf/hKJiYkA\ngPXr1+Ob3/zm8n8KQnykOEuDC/UDqGrRIz0+nOtwyDJVNc+UxktogxAiEG4l7VOnTiEsLAxHjhzB\nhQsXcOTIEfziF7+Yf35qagqHDx/GiRMnEBISgieeeAK7d+8GAOzatQvPPfecZ6InxMdWJKsRLBej\nusWAvVvTwTAM1yERN1mm7Wi4OYK4qBDERIZwHQ4hS+JWebyiogI7duwAMHO1XFNTc8vzwcHBOHHi\nBEJDQ8EwDCIiIjA6Orr8aAnhmFQiQn56FIbHp9E1NMF1OGQZqpqG4HC65gcYEiIEbl1pG41GqNVq\nAIBIJALDMLDZbJDJPl3+LzQ0FADQ0tKCvr4+5Ofno7u7G5WVlXjmmWfgcDjw3HPPYcWKFQueS6VS\nQCLx7Gb0Go3So9+PzAiUdt1amohLjUNo6hlD6ao4n5wzUNrWl/7jnSYAwIPrUqh9PYza03sWTdrH\njh3DsWPHbvlaXV3dLY/Ze4yk7ezsxLPPPosjR45AKpUiPz8farUaW7ZsQW1tLZ577jmcPHlywfOb\nTJbFQrwvGo0SBgNdIXlaILVrQqQCcqkYH9X04qGSeK+XyAOpbX3FanOiulkPnVqBYDGofT2I3q/L\nt1CnZ9GkvWfPHuzZs+eWrz3//PMwGAzIzs6G3W4Hy7K3XGUDwODgIL71rW/h5z//OXJycgAAaWlp\nSEtLAwAUFhZiZGQETqcTYrFnr6QJ8Sa5VIz89EhUNunRozcjUUdXFUJT3zEMq82JkiwNjUsgguLW\nPe2ysjKcPn0aAHDu3DmsWbPmjtf88Ic/xI9+9CPk5ubOf+3VV1/FqVOnAACtra1Qq9WUsIkglcxO\nEbrSTAutCNHcGvIlNNWLCIxb97R37dqF8vJy7N+/HzKZDC+99BIA4JVXXkFpaSkiIiJQVVWFX/3q\nV/PH/PVf/zV2796NH/zgB3jzzTfhcDjwk5/8xDM/BSE+tiotEnKpGFea9fjiplS6WhMQm92JuvZh\n6NQKJOpCuQ6HkPviVtKem5t9u69//evz/779vvecN954w51TEsIrVCIXrvqOEVhtTmzIj6XOFhEc\nWhGNEDdRiVyYrjQPAQA2FPhm5D8hnkRJmxA3fbZEfq8ZFIRfrHYn6tqGoY0IRlocrWhHhIeSNiFu\nmiuR601T6B4ycx0OWYL69mFY7U6U5mipNE4EiZI2IctQmj1TIq+i7ToFYe5WxtzvjRChoaRNyDKs\nSp0tkTdRiZzvrDYn6tqN0KmCkaClUeNEmChpE7IMsrkS+SiVyPnuWscwbHYXlcaJoFHSJmSZqEQu\nDFeaZkaNl2brOI6EEPdR0iZkmahEzn/TNgeutQ8jWq1AvIa24STCRUmbkGWSScUoyIiCfnQKnYO0\nUQIf1bUNw+ZwoTSbSuNE2ChpE+IBq3NmSuSVsyVYwi/zo8ZzaNQ4ETZK2oR4wMqUSCjkElQ26eGi\nEjmvTFlnSuMxkQrERVFpnAgbJW1CPEAqEaEoSwPThBU3eka5Dod8xtUbRjicLqzO0VFpnAgeJW1C\nPGTNiplRyZVNNIqcTy5dn7llMff7IUTIKGkT4iHZiREIU0hxpVkPh9PFdTgEwLjFhsabI0iKViJa\nreA6HEKWjZI2IR4iFolQmq2DecqO5i4T1+EQANXNM2MM1tJVNvETlLQJ8aDVK2ZGJ1++TqPI+eDS\n9SEwAFbnUNIm/oGSNiEelBYXjsgwOWpuGGB3OLkOJ6ANj03jRu8YshIjoFLKuQ6HEI+gpE2IB4kY\nBqtzdJiyOnGtfYTrcALa3Jx5GoBG/AklbUI8bK4Ue5kWWuHUpetDEIsYFGfRgirEf1DSJsTDEnWh\niFYrcK3NiCmrg+twAlKfcRI9ejNWpUYiNFjKdTiEeAwlbUI8jGEYrM7RwuZwofaGgetwAtJlmptN\n/BQlbUK8YF1uNACgomGQ40gCD8uyqLw+BLlUjIL0KK7DIcSjKGkT4gU6tQJpcWG43mWCacLKdTgB\n5ebABPSjUyjMiIJcJuY6HEI8ipI2IV6yPjcaLEtztn3tUuNMdWM1lcaJH6KkTYiXlOboIBYxKKcS\nuc84nC5cuj4EpUKKlSlqrsMhxOMk7hxkt9vx/PPPo7+/H2KxGD/96U+RkJBwy2tyc3NRVFQ0//h3\nv/sdXC7XoscR4i9Cg6XIS4tE7Q0juocmkKhTch2S36vvGIZ5yo4dJQmQiOmahPgft97Vp06dQlhY\nGP77v/8b3/jGN3DkyJE7XhMaGoo33nhj/j+xWLyk4wjxJ+tXzg5Ia6SrbV8or59p57l2J8TfuJW0\nKyoqsGPHDgDA+vXrUVNT49XjCBGqvLQohARJcOn6EFwulutw/Jp5yo6rbUbEaUKQqAvlOhxCvMKt\n8rjRaIRaPXO/SCQSgWEY2Gw2yGSy+dfYbDYcOHAAfX192LlzJ7761a8u6bjbqVQKSCSeHQGq0VCZ\n0huoXe9uU2E83q3oRN/oNIrcXJ2L2nZxlRdvwuli8eCaZGi1YUs6htrVO6hdvWfRpH3s2DEcO3bs\nlq/V1dXd8phl77yC+Md//Ec8+uijYBgGTz75JEpKSu54zd2Ou53JZFn0NfdDo1HCYJjw6Pck1K4L\nKUyLxLsVnTh9sQMJ6uD7Pp7admnOXuoEwwArkyKW1F7Urt5B7bp8C3V6Fk3ae/bswZ49e2752vPP\nPw+DwYDs7GzY7XawLHvH1fL+/fvn/7127Vq0trZCq9Uuehwh/iYtLgzaiGBUtxrwlM2BIJlbBS6y\ngIHhSXT0j2Nlipp29CJ+za172mVlZTh9+jQA4Ny5c1izZs0tz3d0dODAgQNgWRYOhwM1NTXIyMhY\n9DhC/BHDMFibq4PN7kJNKy1r6g1z0+rWr6IBaMS/udXl37VrF8rLy7F//37IZDK89NJLAIBXXnkF\npaWlKCwsRHR0NB5//HGIRCJs3boVeXl5yM3NvetxhPi79SujceJiJy5cG8D6lTFch+NXXCyLisZB\nBMnEKMzQcB0OIV7lVtKem2N9u69//evz//7BD36w5OMI8XdalQJZCRFo7h6F3mSBVqXgOiS/0dJl\nwsi4FRvzYiCX0rKlxL/R6gOE+MjG/Jkr7Av1AxxH4l/mS+M0N5sEAErahPhIcZYWwXIxLtYP0pxt\nD5myOnClRY+o8CBkJERwHQ4hXkdJmxAfkUvFWLMiGqYJKxpuDnMdjl+4dH0INrsLG/NjIWIYrsMh\nxOsoaRPiQxvzZkrkn9RRidwTPr7aDxHDYMMqGtxHAgMlbUJ8KDlaiXhNKK62GTE+aeM6HEHrGpxA\n19AE8tIiaW42CRiUtAnxIYZhsDE/Bk4XS1t2LtNHdf0AgE0FsRxHQojvUNImxMfW5UZDImbwybX+\nJS3lS+5ktTlxqXEQKqUcq1Jp32wSOChpE+JjocFSFGVqMDBsQXv/ONfhCFJl8xCmbU5sWBUDsYg+\nxkjgoHc7IRzYmD9T0v1ktsRL7s8ndQNg8Oncd0ICBSVtQjiQk6RCVHgQKpv0sEw7uA5HUPoMZrT1\njSE3RY2o8PvfNY0QIaOkTQgHRAyDzQWxsNqdKG+g6V/34+PZ6XKb8mkAGgk8lLQJ4cjG/FhIxAw+\nrOmjAWlLZHfMdHLCFFIUZERxHQ4hPkdJmxCOhClkKM3WYXDEgutdJq7DEYTKJj0mpx0oy4uBREwf\nXyTw0LueEA5tLY4DAHxY3ctxJPzHsizer+oFwwAPFMZxHQ4hnKCkTQiHUmPCkBStxNU2I4bHprkO\nh9fa+8bRNTSBogwNDUAjAYuSNiEcYhgGW4viwLLA+at9XIfDa+9X9wAAthXHcxwJIdyhpE0Ix9bk\n6BASJMHHdf2wO1xch8NLpgkrqlsMiNeEICuRtuAkgYuSNiEck0nF2JgXiwmLHVXNeq7D4aXztX1w\nulhsK44HQ1twkgBGSZsQHthSFAcGwIc1NCDtdnaHCx9d7UNIkARrc6O5DocQTlHSJoQHtBHBWJUW\nifb+cdwcoPXIP+tK8xDGLXZszI+FXCrmOhxCOEVJmxCe2FGSAAA4U9nNcST88dlpXltpmhchlLQJ\n4YsVySokakNxpVkP/egU1+HwQkf/ODoHJ1CQHoWoCJrmRQglbUJ4gmEYPLQ2ESwLnKWrbQDA6csz\n7bB9tgpBSKCjpE0Ij5RmaxEZFoQL1wYwYbFxHQ6nBoYnUdNqQEpMGLJpmhchAChpE8IrYpEID65O\ngM3hwoc1gb3YyjuXusACeHhdEk3zImSWxJ2D7HY7nn/+efT390MsFuOnP/0pEhI+LV81NDTgZz/7\n2fzjtrY2vPzyy7h48SJOnjwJnU4HAHj00UexZ8+eZf4IhPiXTXmxOHHhJj6o7sVDaxK5DocTw2PT\nuNQ4hNioENrNi5DPcCtpnzp1CmFhYThy5AguXLiAI0eO4Be/+MX88ytXrsQbb7wBABgfH8ff/d3f\noaCgABcvXsRXvvIVPPnkk56JnhA/JJeJsbUoHifLO3Hh2gD2xQZeafhMZTecLhafW5MIEV1lEzLP\nrfJ4RUUFduzYAQBYv349ampq7vna1157DU8//TREIqrEE7JU24rjIZWIcPZKN5zOwFradNxiw8d1\n/YgMk2PNCh3X4RDCK25daRuNRqjVagCASCQCwzCw2WyQyWS3vG56ehoXLlzA9773vfmvnT59Gh98\n8AFkMhn++Z//+Zay+t2oVApIJJ5dUEGjUXr0+5EZ1K6eo9EA20sT8W5FJ8qvDWBjAM1RPvNuE2wO\nF760NRMx0eFePRe9Z72D2tV7Fk3ax44dw7Fjx275Wl1d3S2PWZa967Hvv/8+tmzZMn+VvXnzZqxd\nuxalpaV4++238cILL+A3v/nNguc3mSyLhXhfNBolDIYJj35PQu3qDZvyonH6UifefL8FmbFKiET+\nXyaesjpw8pMOKBVSFKapvfqeovesd1C7Lt9CnZ5Fk/aePXvuGCz2/PPPw2AwIDs7G3a7HSzL3nGV\nDQDnzp3D/v375x/n5eXN/3vr1q04fPjwkn4AQgKRTqVA2coYXKgfQGXTUECsu33+ah8sVge+sCmV\nliwl5C7cutFcVlaG06dPA5hJzGvWrLnr6xoaGpCdnT3/+IUXXkBVVRUAoLKyEhkZGe6cnpCA8WhZ\nMiRiBn+5cBMOP7+3PWV14PTlbgTJxNhWFDi3Awi5H27d0961axfKy8uxf/9+yGQyvPTSSwCAV155\nBaWlpSgsLAQwM3I8NDR0/rg9e/bg0KFDkEgkYBgGL7zwggd+BEL8V1REMB5ck4R3yjtR3jCITfmx\nXIfkNWev9GDCYsdjG1OgCJJyHQ4hvMSw97ohzROevjdC91u8g9rVe0QyCb724vsIU0jx4tfXQSrx\nv5kY45M2PPebCsilYrz0f9YiSObW9cR9ofesd1C7Lt9C97T976+fED8TGR6MBwrjMDxuxcd1/VyH\n4xWnyjthtTmxe32yTxI2IUJFSZsQAdi1LglyqXgmudmdXIfjUYbRKZyr7YMmIgibC/y3/E+IJ1DS\nJkQAwhQy7CiNx9ikDef8bE3yv3xyE04Xiy9sTIVETB9JhCyE/kIIEYidqxMRLJfg7YpOv9kBrEdv\nxqXGQSRoQ7GaVj8jZFGUtAkRiJAgKT5flozJaQeOf9zBdTge8T8ftYMF8KXNabTGOCFLQEmbEAHZ\nWhyPuKgQfHy1HzcHxrkOZ1nqO4ZxrX0YWQkRWJWq5jocQgSBkjYhAiIRi/BXOzLBAvjD2Va4+D1j\n856sdifeONMCEcPgyzsyab9sQpaIkjYhApOdpMLqHC1uDozjwrUBrsNxy6nyThjHpvFgaQIStKGL\nH0AIAUBJmxBB2rs1A20Lm9EAAAoMSURBVHKpGG+db8fktJ3rcO5Ln8GM05e7ERkmx+c3pHAdDiGC\nQkmbEAFSKeV4tCwZ5ik7/iygQWkulsUbZ1rgdLH4qx1ZkMtoUxBC7gclbUIEakdpAmIiFThX24f2\nvjGuw1mSi9cG0No7hqJMDQoyorgOhxDBoaRNiEBJxCJ8ZWcWwAKvnGzElNXBdUgLGrfY8KdzbZDL\nxPjydtrhjxB3UNImRMCyElXYtS4JhtFp/PG9Vq7DuScXy+L1t5swOe3AFzakQB0WxHVIhAgSJW1C\nBO7zG1KQHK3ExYZBVDYNcR3OXZ2t7MG19mGsSFZhe0kC1+EQIliUtAkROIlYhK8/mguZVIT/PN2C\n4bFprkO6RVvfGN46347wEBm+tjsXIhHNySbEXZS0CfED0WoFvrw9E1NWB149dR0uFz8WXTFP2fHv\n/9sAFiz+z6O5CA+RcR0SIYJGSZsQP7ExLwbFmRq09oziz59wPw2MZVm8duo6RsateGxDCrKTVFyH\nRIjgUdImxE8wDIOnP5cNrSoYb1d04cOaXk7jeedSF+rah5GbrMLD65I5jYUQf0FJmxA/EhosxT88\nkY8whRT/dbYV1S16TuI4X9uH//moAxGhMvwt3ccmxGMoaRPiZ7QqBb7/RD5kUjF+c+I6WntGfXr+\ni/UDeONMC5QKKZ7dV0j3sQnxIErahPih5OgwfOuLK8GyLH711jX0Gcw+Oe+VZj1ef6cJwXIJDuwt\nQGxUiE/OS0igoKRNiJ9amRKJr+7KhsXqwM/+WIuWbpNXz3e1zYhXTjRCLhXjH/YWIFGn9Or5CAlE\nlLQJ8WPrV8bg6YeyMGV14PCbV3Guts/j53CxLN693IWXj9dDLGLw/T35SI0N8/h5CCGAhOsACCHe\ntbkgDtFqBV7+cwPeONOCHr0ZX96eAYl4+X32cYsNr51qQn3HMMJDZPjmYyuRmRDhgagJIXdDSZuQ\nAJCVqMK/PF2CX/1PPc7X9qHPYMaXt2ciKdr9EnZLtwm/OdGIUbMNK1PU+NtHViCMBp0R4lVud7Ur\nKyuxbt06nDt37q7PnzhxAl/60pewZ88eHDt2DABgt9tx4MAB7N+/H08++SR6enrcPT0h5D5FRQTj\nh08VoyRbixu9Y/i/v7uCXx+vR49+6YPUWJZFS7cJLx+vx8//uxbjk3Y8viUN338inxI2IT7g1pV2\nd3c3fvvb36KoqOiuz1ssFrz88st46623IJVK8fjjj2PHjh04d+4cwsLCcOTIEVy4cAFHjhzBL37x\ni2X9AISQpZPLxPjm53NxvSAWf/m4AzWtBtS0GlCSpUFRpgZJ0Uro1AqImE/nVbtYFmNmGxpuDuP9\nqt75JJ+kU+KvdmQiPT6cqx+HkIDjVtLWaDT49a9/jR/+8Id3fb6urg6rVq2CUjlTeisqKkJNTQ0q\nKirw2GOPAQDWr1+PgwcPuhk2IcRdDMMgN1mNFUkq1HeM4C+fdKCqxYCqFgOAmcSeoA2FRMRgeHwa\nI+NWOGfXMhcxDEqytdheHI+M+HAwDC2aQogvuZW0g4ODF3zeaDRCrVbPP1ar1TAYDLd8XSQSgWEY\n2Gw2yGT3LqupVApIJGJ3wrwnjYamongDtav3eKttt2nDsHVNEpo7TbjRY0Jb7yja+8bQ0TcGFwuo\nw+RIj49AlCoYSToltq1OhFal8EosXKD3rHdQu3rPokn72LFj8/ek53znO9/Bxo0bl3wSlr37jkP3\n+vpnmUyWJZ9nKTQaJQyGCY9+T0Lt6k2+aNuoUCmicrRYl6MFANjsTjAMA6nktmEvDqff/J7pPesd\n1K7Lt1CnZ9GkvWfPHuzZs+e+TqjVamE0Gucf6/V6FBQUQKvVwmAw/P/27ick6jSO4/hn0p1DjplJ\nGkKFdBGCSlHClOigBgZChc0UVocuUR0ED8YgFAihngSVTHQunkZm+uMhTAIHhEY8CBVCUQaRiU7i\nlP/Byg4LwS5sLLsz++zzm/frNnOZzzwMfOZ5vsMzKiws1Obmpra2tn65ywZghvu3xJ5uAUiMpFyu\ncvjwYb18+VJLS0taXV3V5OSkSkpKVF5eruHhYUnS6Oiojh49moyXBwDAkf7RTDsSiai/v1/v3r3T\n1NSUBgYGFAgE1Nvbq9LSUhUVFamxsVFXrlyRy+XS9evXlZmZqZqaGj179kznz5+X2+1Wa2trot8P\nAACO5dr6O4NlgxI9G2Hekhysa/KwtsnBuiYH6/rv/Wqmzd3jAABYgtIGAMASlDYAAJagtAEAsASl\nDQCAJShtAAAsQWkDAGAJShsAAEv87y9XAQAAv2OnDQCAJShtAAAsQWkDAGAJShsAAEtQ2gAAWILS\nBgDAEilV2nfu3JHX65XP59OLFy9Mx3GM9vZ2eb1enT17ViMjI6bjOMrGxoYqKyt1//5901EcZWho\nSLW1tTpz5owikYjpOI6wurqqGzdu6OLFi/L5fBobGzMdyZHSTQf4r0xMTOj9+/cKBoOanp6W3+9X\nMBg0Hct64+PjevPmjYLBoOLxuE6fPq3q6mrTsRzj7t27ysrKMh3DUeLxuLq7uxUOh7W2tqbOzk6d\nOHHCdCzrPXjwQAUFBWpsbNT8/LwuX76s4eFh07EcJ2VKOxqNqrKyUpJ04MABffnyRSsrK/J4PIaT\n2a20tFSHDh2SJO3YsUPr6+v69u2b0tLSDCez3/T0tN6+fUuhJFg0GlVZWZk8Ho88Ho9aWlpMR3KE\n7OxsvX79WpK0tLSk7Oxsw4mcKWWOxxcWFv7wIdq1a5c+ffpkMJEzpKWlafv27ZKkUCik48ePU9gJ\n0tbWpps3b5qO4TgzMzPa2NjQ1atXdeHCBUWjUdORHOHUqVOanZ1VVVWV6uvr1dTUZDqSI6XMTvvP\nuL01sZ4+fapQKKRAIGA6iiM8fPhQR44c0d69e01HcaTPnz+rq6tLs7OzunTpkkZHR+VyuUzHstqj\nR4+Un5+v/v5+vXr1Sn6/n99iJEHKlHZubq4WFhZ+Po7FYtq9e7fBRM4xNjamnp4e9fX1KTMz03Qc\nR4hEIvrw4YMikYjm5ubkdru1Z88eHTt2zHQ06+Xk5KioqEjp6enat2+fMjIytLi4qJycHNPRrDY5\nOamKigpJUmFhoWKxGKOyJEiZ4/Hy8nI9efJEkjQ1NaXc3Fzm2QmwvLys9vZ23bt3Tzt37jQdxzE6\nOjoUDoc1ODiouro6Xbt2jcJOkIqKCo2Pj+v79++Kx+NaW1tj/poA+/fv1/PnzyVJHz9+VEZGBoWd\nBCmz0y4uLtbBgwfl8/nkcrl069Yt05Ec4fHjx4rH42poaPj5XFtbm/Lz8w2mAv5aXl6eTp48qXPn\nzkmSmpubtW1byuxfksbr9crv96u+vl5fv37V7du3TUdyJP6aEwAAS/D1EgAAS1DaAABYgtIGAMAS\nlDYAAJagtAEAsASlDQCAJShtAAAsQWkDAGCJH4uERqtOLdVtAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f1cbfaa65f8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "JVoI-FOBf8Yl",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "With just a little bit of extra work, we can easily plot multiple lines at once, and add a title, legend, and axis labels."
      ]
    },
    {
      "metadata": {
        "id": "bpKurik2gEp7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        },
        "outputId": "a4754d84-6964-4e62-aad0-9ed496048414"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Compute the x and y coordinates for points on sine and cosine curves\n",
        "eip_x = np.arange(0, 3 * np.pi, 0.1)\n",
        "eip_y_sin = np.sin(eip_x)\n",
        "eip_y_cos = np.cos(eip_x)\n",
        "\n",
        "# Plot the points using matplotlib\n",
        "plt.plot(eip_x, eip_y_sin)\n",
        "plt.plot(eip_x, eip_y_cos)\n",
        "plt.xlabel('x axis label')\n",
        "plt.ylabel('y axis label')\n",
        "plt.title('Sine and Cosine')\n",
        "plt.legend(['Sine', 'Cosine'])\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fdb3cadfa20>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "PHzX_1uYgVxS",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "* Subplots : You can plot different things in the same figure using the subplot function."
      ]
    },
    {
      "metadata": {
        "id": "rtm_kMhQgdQg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "outputId": "8208d056-c8f7-4363-f9dd-4c8f726ce6bc"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Compute the x and y coordinates for points on sine and cosine curves\n",
        "eip_x = np.arange(0, 3 * np.pi, 0.1)\n",
        "eip_y_sin = np.sin(eip_x)\n",
        "eip_y_cos = np.cos(eip_x)\n",
        "\n",
        "# Set up a subplot grid that has height 2 and width 1,\n",
        "# and set the first such subplot as active.\n",
        "plt.subplot(2, 1, 1)\n",
        "\n",
        "# Make the first plot\n",
        "plt.plot(eip_x, eip_y_sin)\n",
        "plt.title('Sine')\n",
        "\n",
        "# Set the second subplot as active, and make the second plot.\n",
        "plt.subplot(2, 1, 2)\n",
        "plt.plot(eip_x, eip_y_cos)\n",
        "plt.title('Cosine')\n",
        "\n",
        "# Show the figure.\n",
        "plt.show()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n11VV7QAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fdb3ebe6080>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "gwL8StXQgppf",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Images : \n",
        "You can use the imshow function to show images. "
      ]
    },
    {
      "metadata": {
        "id": "MrWesPfKguzQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "2f7ad405-3bbb-48b0-8721-aa71b2c752e4"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.misc import imread, imresize\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "eip_img = imread('cat_tinted.jpg')\n",
        "eip_img_tinted = eip_img * [1, 0.95, 0.9]\n",
        "\n",
        "# Show the original image\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.imshow(eip_img)\n",
        "\n",
        "# Show the tinted image\n",
        "plt.subplot(1, 2, 2)\n",
        "\n",
        "# A slight gotcha with imshow is that it might give strange results\n",
        "# if presented with data that is not uint8. To work around this, we\n",
        "# explicitly cast the image to uint8 before displaying it.\n",
        "plt.imshow(np.uint8(eip_img_tinted))\n",
        "plt.show()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\neOqppwC4fPky733ve/mZn/kZPve5z/H+978fgD/4gz/g3Llz/MRP/MQ3NcCNNtropdWG5Y02un/1\ndRei/eVf/iVf+MIX+LVf+7VT2yQvNud/ne8CG2200V3WhuWNNrp/9TWtlp555hn29vYAeOSRR2jb\nliiK1vad+/v7nDlzhjNnzqwLogBu3rzJmTNn7tCwN9poo29UG5Y32uj+19ectD/96U/zxBNPAHB4\neEiWZXzHd3wHf/d3fwfA3//93/Nd3/VdfOu3fiuf+9znWCwWpGnKZz7zGb7t277tzo5+o402+rq1\nYXmjje5/fc0z7aIo+PVf/3X29vYoioJ3vetdvOY1r+F973sfZVly/vx5PvjBD+I4Dn/7t3/Lxz/+\ncQzD4LHHHuOHf/iH79bPsdFGG30NbVjeaKP7X193IdpGG2200UYbbXRvdf/EB2200UYbbbTR/8+1\nmbQ32mijjTba6D7RPfMe/63f+i0++9nPYhgG73//+/mWb/mWu/K5Tz/9NL/yK7/Cq171KgAefvhh\n3v72t9/WyvFO6Nlnn+Wd73wnP/uzP8tjjz3G3t7eS2oj+Z8dx+OPP87nP//5tevVL/zCL/C93/u9\nd3wcH/rQh/jXf/1Xmqbhl37pl3jta197T67HreP41Kc+dVevx92wGL1Tulcsw4bnFxvHveB5w/Kx\n7ijP3T3Q008/3f3iL/5i13Vd99xzz3Vvfetb79pn/8u//Ev37ne/+9TXHn/88e5v/uZvuq7rut/7\nvd/r/uIv/uKOfHaapt1jjz3WfeADH+j+/M///EU/O03T7k1velO3WCy6PM+7H/qhH+qm0+kdHcf7\n3ve+7lOf+tQL/t6dHMdTTz3Vvf3tb++6rusmk0n3Pd/zPffketxuHHf7evz1X/9199GPfrTruq67\nevVq96Y3vemeXItvVPeS5a7b8Pxi47jb9++G5dO6kzzfk+3xp556ih/4gR8A4BWveAXz+ZwkSe7F\nUAB5W//+7/9+QKwcVw5RL7Vc1+VjH/vYqZ7X2332Zz/72bWNpO/7axvJOzmO2+lOj+MNb3gDf/iH\nfwhAv98nz/N7cj1uN45VotRJ3clxPProo7zjHe8ATluM3u1r8Y3qvxrLsOH5xXQnx7Fh+bTuJM/3\nZNI+PDxkNBqt/308HnNwcHDXPv+5557jl3/5l/mpn/op/vmf/5k8z9fbZ1tbW3dsLLZt4/v+qa/d\n7rMPDw8Zj8frv/NSX5/bjQPgE5/4BG9729v41V/9VSaTyR0fh2VZhNr7/cknn+S7v/u778n1uN04\nLMu669cDxGL0Pe95D+9///vvybX4RnWvWYYNz/8VeN6wfHvdCZ7veZ423F2bxJe97GW8613v4s1v\nfjNXrlzhbW9726k3sbs5llv1Yp99N8b0Iz/yIwyHQx555BE++tGP8sd//Me87nWvuyvj+Id/+Aee\nfPJJnnjiCd70pjd9zc+7G+N45pln7sn1uN8tRu/2eDY83173iucNy6d1J3i+Jyvt29kk7uzs3JXP\n3t3d5dFHH8UwDC5dusT29jbz+fwFVo53S2EY/pewkfz2b/92HnnkEQDe+MY38uyzz96VcfzTP/0T\nH/nIR/jYxz5Gr9e7Z9fj1nHc7etxv1qM3kuWYcPzi+le8Lxh+Vh3kud7Mml/53d+59o68fOf/zxn\nzpwhjuO78tmf/OQn+fjHPw7AwcEBR0dHvOUtb3mBlePd0n8VG8l3v/vdXLlyBZBzuVe96lV3fBzL\n5ZIPfehD/Omf/um6svNeXI/bjeNuX4/71WL0XrIMG55fTHf7/t2wfFp3kud75oj24Q9/mE9/+tMY\nhsFv/MZv8OpXv/qufG6SJLznPe9hsZDM5Xe961088sgjt7VyfKn1zDPP8Du/8ztcu3YN27bZ3d3l\nwx/+MI8//vhdtZG83Tgee+wxPvrRjxIEAWEY8sEPfpCtra07Oo6/+qu/4o/+6I946KGH1l/77d/+\nbT7wgQ/c1etxu3G85S1v4ROf+MRdux73s8XovWIZNjy/2DjuNs8blk/rTvK8sTHdaKONNtpoo/tE\nG0e0jTbaaKONNrpPtJm0N9poo4022ug+0WbS3mijjTbaaKP7RJtJe6ONNtpoo43uE20m7Y022mij\njTa6T7SZtDfaaKONNtroPtFm0t5oo4022mij+0T/H8YoFnpCyWSmAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fdb3c4c85f8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}
